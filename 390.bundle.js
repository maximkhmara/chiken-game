"use strict";(self.webpackChunkpixi_mini_game=self.webpackChunkpixi_mini_game||[]).push([[390],{2067:(e,t,i)=>{i.d(t,{Ls:()=>n,_Q:()=>r,mA:()=>s});const n={name:"local-uniform-bit",vertex:{header:"\n\n            struct LocalUniforms {\n                uTransformMatrix:mat3x3<f32>,\n                uColor:vec4<f32>,\n                uRound:f32,\n            }\n\n            @group(1) @binding(0) var<uniform> localUniforms : LocalUniforms;\n        ",main:"\n            vColor *= localUniforms.uColor;\n            modelMatrix *= localUniforms.uTransformMatrix;\n        ",end:"\n            if(localUniforms.uRound == 1)\n            {\n                vPosition = vec4(roundPixels(vPosition.xy, globalUniforms.uResolution), vPosition.zw);\n            }\n        "}},r={...n,vertex:{...n.vertex,header:n.vertex.header.replace("group(1)","group(2)")}},s={name:"local-uniform-bit",vertex:{header:"\n\n            uniform mat3 uTransformMatrix;\n            uniform vec4 uColor;\n            uniform float uRound;\n        ",main:"\n            vColor *= uColor;\n            modelMatrix = uTransformMatrix;\n        ",end:"\n            if(uRound == 1.)\n            {\n                gl_Position.xy = roundPixels(gl_Position.xy, uResolution);\n            }\n        "}}},2289:(e,t,i)=>{i.d(t,{s:()=>r});var n=i(2048);function r(e,t){const{texture:i,bounds:r}=e;(0,n.y)(r,t._anchor,i);const s=t._style.padding;r.minX-=s,r.minY-=s,r.maxX-=s,r.maxY-=s}},2558:(e,t,i)=>{i.d(t,{M:()=>s});var n=i(2437);const r=new(i(9636).c);function s(e,t,i,s){const o=r;o.minX=0,o.minY=0,o.maxX=e.width/s|0,o.maxY=e.height/s|0;const a=n.W.getOptimalTexture(o.width,o.height,s,!1);return a.source.uploadMethodId="image",a.source.resource=e,a.source.alphaMode="premultiply-alpha-on-upload",a.frame.width=t/s,a.frame.height=i/s,a.source.emit("update",a.source),a.updateUvs(),a}},2760:(e,t,i)=>{function n(e,t,i){const n=(e>>24&255)/255;t[i++]=(255&e)/255*n,t[i++]=(e>>8&255)/255*n,t[i++]=(e>>16&255)/255*n,t[i++]=n}i.d(t,{V:()=>n})},4732:(e,t,i)=>{var n=i(8507);class r{static init(e){Object.defineProperty(this,"resizeTo",{set(e){globalThis.removeEventListener("resize",this.queueResize),this._resizeTo=e,e&&(globalThis.addEventListener("resize",this.queueResize),this.resize())},get(){return this._resizeTo}}),this.queueResize=()=>{this._resizeTo&&(this._cancelResize(),this._resizeId=requestAnimationFrame((()=>this.resize())))},this._cancelResize=()=>{this._resizeId&&(cancelAnimationFrame(this._resizeId),this._resizeId=null)},this.resize=()=>{if(!this._resizeTo)return;let e,t;if(this._cancelResize(),this._resizeTo===globalThis.window)e=globalThis.innerWidth,t=globalThis.innerHeight;else{const{clientWidth:i,clientHeight:n}=this._resizeTo;e=i,t=n}this.renderer.resize(e,t),this.render()},this._resizeId=null,this._resizeTo=null,this.resizeTo=e.resizeTo||null}static destroy(){globalThis.removeEventListener("resize",this.queueResize),this._cancelResize(),this._cancelResize=null,this.queueResize=null,this.resizeTo=null,this.resize=null}}r.extension=n.Ag.Application;var s=i(4458),o=i(7309);class a{static init(e){e=Object.assign({autoStart:!0,sharedTicker:!1},e),Object.defineProperty(this,"ticker",{set(e){this._ticker&&this._ticker.remove(this.render,this),this._ticker=e,e&&e.add(this.render,this,s.d.LOW)},get(){return this._ticker}}),this.stop=()=>{this._ticker.stop()},this.start=()=>{this._ticker.start()},this._ticker=null,this.ticker=e.sharedTicker?o.R.shared:new o.R,e.autoStart&&this.start()}static destroy(){if(this._ticker){const e=this._ticker;this.ticker=null,e.destroy()}}}a.extension=n.Ag.Application,n.XO.add(r),n.XO.add(a)},4980:(e,t,i)=>{var n=i(8507);class r{constructor(e){this._renderer=e}push(e,t,i){this._renderer.renderPipes.batch.break(i),i.add({renderPipeId:"filter",canBundle:!1,action:"pushFilter",container:t,filterEffect:e})}pop(e,t,i){this._renderer.renderPipes.batch.break(i),i.add({renderPipeId:"filter",action:"popFilter",canBundle:!1})}execute(e){"pushFilter"===e.action?this._renderer.filter.push(e):"popFilter"===e.action&&this._renderer.filter.pop()}destroy(){this._renderer=null}}r.extension={type:[n.Ag.WebGLPipes,n.Ag.WebGPUPipes,n.Ag.CanvasPipes],name:"filter"};var s=i(9313),o=i(5101),a=i(3513),h=i(6011),l=i(5811),d=i(4492),u=i(2437),c=i(5099),p=i(9636),g=i(268);const m=new h.V({attributes:{aPosition:{buffer:new Float32Array([0,0,1,0,1,1,0,1]),format:"float32x2",stride:8,offset:0}},indexBuffer:new Uint32Array([0,1,2,0,2,3])});class f{constructor(e){this._filterStackIndex=0,this._filterStack=[],this._filterGlobalUniforms=new l.k({uInputSize:{value:new Float32Array(4),type:"vec4<f32>"},uInputPixel:{value:new Float32Array(4),type:"vec4<f32>"},uInputClamp:{value:new Float32Array(4),type:"vec4<f32>"},uOutputFrame:{value:new Float32Array(4),type:"vec4<f32>"},uGlobalFrame:{value:new Float32Array(4),type:"vec4<f32>"},uOutputTexture:{value:new Float32Array(4),type:"vec4<f32>"}}),this._globalFilterBindGroup=new a.T({}),this.renderer=e}get activeBackTexture(){return this._activeFilterData?.backTexture}push(e){const t=this.renderer,i=e.filterEffect.filters;this._filterStack[this._filterStackIndex]||(this._filterStack[this._filterStackIndex]=this._getFilterData());const n=this._filterStack[this._filterStackIndex];if(this._filterStackIndex++,0===i.length)return void(n.skip=!0);const r=n.bounds;if(e.renderables?function(e,t){t.clear();const i=t.matrix;for(let i=0;i<e.length;i++){const n=e[i];n.globalDisplayStatus<7||(t.matrix=n.worldTransform,t.addBounds(n.bounds))}t.matrix=i}(e.renderables,r):e.filterEffect.filterArea?(r.clear(),r.addRect(e.filterEffect.filterArea),r.applyMatrix(e.container.worldTransform)):e.container.getFastGlobalBounds(!0,r),e.container){const t=(e.container.renderGroup||e.container.parentRenderGroup).cacheToLocalTransform;t&&r.applyMatrix(t)}const s=t.renderTarget.renderTarget.colorTexture.source;let o=1/0,a=0,h=!0,l=!1,d=!1,c=!0;for(let e=0;e<i.length;e++){const n=i[e];if(o=Math.min(o,"inherit"===n.resolution?s._resolution:n.resolution),a+=n.padding,"off"===n.antialias?h=!1:"inherit"===n.antialias&&h&&(h=s.antialias),n.clipToViewport||(c=!1),!(n.compatibleRenderers&t.type)){d=!1;break}if(n.blendRequired&&!(t.backBuffer?.useBackBuffer??1)){(0,g.R)("Blend filter requires backBuffer on WebGL renderer to be enabled. Set `useBackBuffer: true` in the renderer options."),d=!1;break}d=n.enabled||d,l||(l=n.blendRequired)}if(d){if(c){const e=t.renderTarget.rootViewPort,i=t.renderTarget.renderTarget.resolution;r.fitBounds(0,e.width/i,0,e.height/i)}r.scale(o).ceil().scale(1/o).pad(0|a),r.isPositive?(n.skip=!1,n.bounds=r,n.blendRequired=l,n.container=e.container,n.filterEffect=e.filterEffect,n.previousRenderSurface=t.renderTarget.renderSurface,n.inputTexture=u.W.getOptimalTexture(r.width,r.height,o,h),t.renderTarget.bind(n.inputTexture,!0),t.globalUniforms.push({offset:r})):n.skip=!0}else n.skip=!0}pop(){const e=this.renderer;this._filterStackIndex--;const t=this._filterStack[this._filterStackIndex];if(t.skip)return;this._activeFilterData=t;const i=t.inputTexture,n=t.bounds;let r=d.g.EMPTY;if(e.renderTarget.finishRenderPass(),t.blendRequired){const i=this._filterStackIndex>0?this._filterStack[this._filterStackIndex-1].bounds:null,s=e.renderTarget.getRenderTarget(t.previousRenderSurface);r=this.getBackTexture(s,n,i)}t.backTexture=r;const s=t.filterEffect.filters;if(this._globalFilterBindGroup.setResource(i.source.style,2),this._globalFilterBindGroup.setResource(r.source,3),e.globalUniforms.pop(),1===s.length)s[0].apply(this,i,t.previousRenderSurface,!1),u.W.returnTexture(i);else{let e=t.inputTexture,i=u.W.getOptimalTexture(n.width,n.height,e.source._resolution,!1),r=0;for(r=0;r<s.length-1;++r){s[r].apply(this,e,i,!0);const t=e;e=i,i=t}s[r].apply(this,e,t.previousRenderSurface,!1),u.W.returnTexture(e),u.W.returnTexture(i)}t.blendRequired&&u.W.returnTexture(r)}getBackTexture(e,t,i){const n=e.colorTexture.source._resolution,r=u.W.getOptimalTexture(t.width,t.height,n,!1);let s=t.minX,o=t.minY;i&&(s-=i.minX,o-=i.minY),s=Math.floor(s*n),o=Math.floor(o*n);const a=Math.ceil(t.width*n),h=Math.ceil(t.height*n);return this.renderer.renderTarget.copyToTexture(e,r,{x:s,y:o},{width:a,height:h},{x:0,y:0}),r}applyFilter(e,t,i,n){const r=this.renderer,s=this._filterStack[this._filterStackIndex],a=s.bounds,h=o.b.shared,l=s.previousRenderSurface===i;let u=this.renderer.renderTarget.rootRenderTarget.colorTexture.source._resolution,p=this._filterStackIndex-1;for(;p>0&&this._filterStack[p].skip;)--p;p>0&&(u=this._filterStack[p].inputTexture.source._resolution);const g=this._filterGlobalUniforms,f=g.uniforms,v=f.uOutputFrame,_=f.uInputSize,b=f.uInputPixel,y=f.uInputClamp,x=f.uGlobalFrame,T=f.uOutputTexture;if(l){let e=this._filterStackIndex;for(;e>0;){e--;const t=this._filterStack[this._filterStackIndex-1];if(!t.skip){h.x=t.bounds.minX,h.y=t.bounds.minY;break}}v[0]=a.minX-h.x,v[1]=a.minY-h.y}else v[0]=0,v[1]=0;v[2]=t.frame.width,v[3]=t.frame.height,_[0]=t.source.width,_[1]=t.source.height,_[2]=1/_[0],_[3]=1/_[1],b[0]=t.source.pixelWidth,b[1]=t.source.pixelHeight,b[2]=1/b[0],b[3]=1/b[1],y[0]=.5*b[2],y[1]=.5*b[3],y[2]=t.frame.width*_[2]-.5*b[2],y[3]=t.frame.height*_[3]-.5*b[3];const E=this.renderer.renderTarget.rootRenderTarget.colorTexture;x[0]=h.x*u,x[1]=h.y*u,x[2]=E.source.width*u,x[3]=E.source.height*u;const w=this.renderer.renderTarget.getRenderTarget(i);if(r.renderTarget.bind(i,!!n),i instanceof d.g?(T[0]=i.frame.width,T[1]=i.frame.height):(T[0]=w.width,T[1]=w.height),T[2]=w.isRoot?-1:1,g.update(),r.renderPipes.uniformBatch){const e=r.renderPipes.uniformBatch.getUboResource(g);this._globalFilterBindGroup.setResource(e,0)}else this._globalFilterBindGroup.setResource(g,0);this._globalFilterBindGroup.setResource(t.source,1),this._globalFilterBindGroup.setResource(t.source.style,2),e.groups[0]=this._globalFilterBindGroup,r.encoder.draw({geometry:m,shader:e,state:e._state,topology:"triangle-list"}),r.type===c.W.WEBGL&&r.renderTarget.finishRenderPass()}_getFilterData(){return{skip:!1,inputTexture:null,bounds:new p.c,container:null,filterEffect:null,blendRequired:!1,previousRenderSurface:null}}calculateSpriteMatrix(e,t){const i=this._activeFilterData,n=e.set(i.inputTexture._source.width,0,0,i.inputTexture._source.height,i.bounds.minX,i.bounds.minY),r=t.worldTransform.copyTo(s.u.shared),o=t.renderGroup||t.parentRenderGroup;return o&&o.cacheToLocalTransform&&r.prepend(o.cacheToLocalTransform),r.invert(),n.prepend(r),n.scale(1/t.texture.frame.width,1/t.texture.frame.height),n.translate(t.anchor.x,t.anchor.y),n}}f.extension={type:[n.Ag.WebGLSystem,n.Ag.WebGPUSystem],name:"filter"},n.XO.add(f),n.XO.add(r)},5060:(e,t,i)=>{i.d(t,{u:()=>h});var n=i(949),r=i(1132),s=i(6011),o=i(4670);const a=class e extends s.V{constructor(...t){let i=t[0]??{};i instanceof Float32Array&&((0,o.t6)(o.lj,"use new MeshGeometry({ positions, uvs, indices }) instead"),i={positions:i,uvs:t[1],indices:t[2]}),i={...e.defaultOptions,...i};const s=i.positions||new Float32Array([0,0,1,0,1,1,0,1]);let a=i.uvs;a||(a=i.positions?new Float32Array(s.length):new Float32Array([0,0,1,0,1,1,0,1]));const h=i.indices||new Uint32Array([0,1,2,0,2,3]),l=i.shrinkBuffersToFit;super({attributes:{aPosition:{buffer:new n.h({data:s,label:"attribute-mesh-positions",shrinkToFit:l,usage:r.S.VERTEX|r.S.COPY_DST}),format:"float32x2",stride:8,offset:0},aUV:{buffer:new n.h({data:a,label:"attribute-mesh-uvs",shrinkToFit:l,usage:r.S.VERTEX|r.S.COPY_DST}),format:"float32x2",stride:8,offset:0}},indexBuffer:new n.h({data:h,label:"index-mesh-buffer",shrinkToFit:l,usage:r.S.INDEX|r.S.COPY_DST}),topology:i.topology}),this.batchMode="auto"}get positions(){return this.attributes.aPosition.buffer.data}set positions(e){this.attributes.aPosition.buffer.data=e}get uvs(){return this.attributes.aUV.buffer.data}set uvs(e){this.attributes.aUV.buffer.data=e}get indices(){return this.indexBuffer.data}set indices(e){this.indexBuffer.data=e}};a.defaultOptions={topology:"triangle-list",shrinkBuffersToFit:!1};let h=a},5285:(e,t,i)=>{var n=i(8507),r=i(9313),s=i(3513),o=i(5811),a=i(8639),h=i(8218),l=i(2760),d=i(8734);class u{constructor(e,t){this.localUniforms=new o.k({uTransformMatrix:{value:new r.u,type:"mat3x3<f32>"},uColor:{value:new Float32Array([1,1,1,1]),type:"vec4<f32>"},uRound:{value:0,type:"f32"}}),this.localUniformsBindGroup=new s.T({0:this.localUniforms}),this._meshDataHash=Object.create(null),this._gpuBatchableMeshHash=Object.create(null),this._destroyRenderableBound=this.destroyRenderable.bind(this),this.renderer=e,this._adaptor=t,this._adaptor.init(),e.renderableGC.addManagedHash(this,"_gpuBatchableMeshHash"),e.renderableGC.addManagedHash(this,"_meshDataHash")}validateRenderable(e){const t=this._getMeshData(e),i=t.batched,n=e.batched;if(t.batched=n,i!==n)return!0;if(n){const i=e._geometry;if(i.indices.length!==t.indexSize||i.positions.length!==t.vertexSize)return t.indexSize=i.indices.length,t.vertexSize=i.positions.length,!0;const n=this._getBatchableMesh(e);return n.texture.uid!==e._texture.uid&&(n._textureMatrixUpdateId=-1),!n._batcher.checkAndUpdateTexture(n,e._texture)}return!1}addRenderable(e,t){const i=this.renderer.renderPipes.batch,{batched:n}=this._getMeshData(e);if(n){const n=this._getBatchableMesh(e);n.setTexture(e._texture),n.geometry=e._geometry,i.addToBatch(n,t)}else i.break(t),t.add(e)}updateRenderable(e){if(e.batched){const t=this._gpuBatchableMeshHash[e.uid];t.setTexture(e._texture),t.geometry=e._geometry,t._batcher.updateElement(t)}}destroyRenderable(e){this._meshDataHash[e.uid]=null;const t=this._gpuBatchableMeshHash[e.uid];t&&(h.Z.return(t),this._gpuBatchableMeshHash[e.uid]=null),e.off("destroyed",this._destroyRenderableBound)}execute(e){if(!e.isRenderable)return;e.state.blendMode=(0,a.i)(e.groupBlendMode,e.texture._source);const t=this.localUniforms;t.uniforms.uTransformMatrix=e.groupTransform,t.uniforms.uRound=this.renderer._roundPixels|e._roundPixels,t.update(),(0,l.V)(e.groupColorAlpha,t.uniforms.uColor,0),this._adaptor.execute(this,e)}_getMeshData(e){return this._meshDataHash[e.uid]||this._initMeshData(e)}_initMeshData(e){return this._meshDataHash[e.uid]={batched:e.batched,indexSize:e._geometry.indices?.length,vertexSize:e._geometry.positions?.length},e.on("destroyed",this._destroyRenderableBound),this._meshDataHash[e.uid]}_getBatchableMesh(e){return this._gpuBatchableMeshHash[e.uid]||this._initBatchableMesh(e)}_initBatchableMesh(e){const t=h.Z.get(d.U);return t.renderable=e,t.setTexture(e._texture),t.transform=e.groupTransform,t.roundPixels=this.renderer._roundPixels|e._roundPixels,this._gpuBatchableMeshHash[e.uid]=t,t}destroy(){for(const e in this._gpuBatchableMeshHash)this._gpuBatchableMeshHash[e]&&h.Z.return(this._gpuBatchableMeshHash[e]);this._gpuBatchableMeshHash=null,this._meshDataHash=null,this.localUniforms=null,this.localUniformsBindGroup=null,this._adaptor.destroy(),this._adaptor=null,this.renderer=null}}u.extension={type:[n.Ag.WebGLPipes,n.Ag.WebGPUPipes,n.Ag.CanvasPipes],name:"mesh"},n.XO.add(u)},5390:(e,t,i)=>{var n=i(8507),r=i(5815),s=i(5101);class o{constructor(e){this.bubbles=!0,this.cancelBubble=!0,this.cancelable=!1,this.composed=!1,this.defaultPrevented=!1,this.eventPhase=o.prototype.NONE,this.propagationStopped=!1,this.propagationImmediatelyStopped=!1,this.layer=new s.b,this.page=new s.b,this.NONE=0,this.CAPTURING_PHASE=1,this.AT_TARGET=2,this.BUBBLING_PHASE=3,this.manager=e}get layerX(){return this.layer.x}get layerY(){return this.layer.y}get pageX(){return this.page.x}get pageY(){return this.page.y}get data(){return this}composedPath(){return!this.manager||this.path&&this.path[this.path.length-1]===this.target||(this.path=this.target?this.manager.propagationPath(this.target):[]),this.path}initEvent(e,t,i){throw new Error("initEvent() is a legacy DOM API. It is not implemented in the Federated Events API.")}initUIEvent(e,t,i,n,r){throw new Error("initUIEvent() is a legacy DOM API. It is not implemented in the Federated Events API.")}preventDefault(){this.nativeEvent instanceof Event&&this.nativeEvent.cancelable&&this.nativeEvent.preventDefault(),this.defaultPrevented=!0}stopImmediatePropagation(){this.propagationImmediatelyStopped=!0}stopPropagation(){this.propagationStopped=!0}}var a=/iPhone/i,h=/iPod/i,l=/iPad/i,d=/\biOS-universal(?:.+)Mac\b/i,u=/\bAndroid(?:.+)Mobile\b/i,c=/Android/i,p=/(?:SD4930UR|\bSilk(?:.+)Mobile\b)/i,g=/Silk/i,m=/Windows Phone/i,f=/\bWindows(?:.+)ARM\b/i,v=/BlackBerry/i,_=/BB10/i,b=/Opera Mini/i,y=/\b(CriOS|Chrome)(?:.+)Mobile/i,x=/Mobile(?:.+)Firefox\b/i,T=function(e){return void 0!==e&&"MacIntel"===e.platform&&"number"==typeof e.maxTouchPoints&&e.maxTouchPoints>1&&"undefined"==typeof MSStream};function E(e){var t={userAgent:"",platform:"",maxTouchPoints:0};e||"undefined"==typeof navigator?"string"==typeof e?t.userAgent=e:e&&e.userAgent&&(t={userAgent:e.userAgent,platform:e.platform,maxTouchPoints:e.maxTouchPoints||0}):t={userAgent:navigator.userAgent,platform:navigator.platform,maxTouchPoints:navigator.maxTouchPoints||0};var i=t.userAgent,n=i.split("[FBAN");void 0!==n[1]&&(i=n[0]),void 0!==(n=i.split("Twitter"))[1]&&(i=n[0]);var r=function(e){return function(t){return t.test(e)}}(i),s={apple:{phone:r(a)&&!r(m),ipod:r(h),tablet:!r(a)&&(r(l)||T(t))&&!r(m),universal:r(d),device:(r(a)||r(h)||r(l)||r(d)||T(t))&&!r(m)},amazon:{phone:r(p),tablet:!r(p)&&r(g),device:r(p)||r(g)},android:{phone:!r(m)&&r(p)||!r(m)&&r(u),tablet:!r(m)&&!r(p)&&!r(u)&&(r(g)||r(c)),device:!r(m)&&(r(p)||r(g)||r(u)||r(c))||r(/\bokhttp\b/i)},windows:{phone:r(m),tablet:r(f),device:r(m)||r(f)},other:{blackberry:r(v),blackberry10:r(_),opera:r(b),firefox:r(x),chrome:r(y),device:r(v)||r(_)||r(b)||r(x)||r(y)},any:!1,phone:!1,tablet:!1};return s.any=s.apple.device||s.android.device||s.windows.device||s.other.device,s.phone=s.apple.phone||s.android.phone||s.windows.phone,s.tablet=s.apple.tablet||s.android.tablet||s.windows.tablet,s}const w=(E.default??E)(globalThis.navigator);var P=i(9903);const S=class e{constructor(e,t=w){this._mobileInfo=t,this.debug=!1,this._activateOnTab=!0,this._deactivateOnMouseMove=!0,this._isActive=!1,this._isMobileAccessibility=!1,this._div=null,this._pool=[],this._renderId=0,this._children=[],this._androidUpdateCount=0,this._androidUpdateFrequency=500,this._hookDiv=null,(t.tablet||t.phone)&&this._createTouchHook(),this._renderer=e}get isActive(){return this._isActive}get isMobileAccessibility(){return this._isMobileAccessibility}get hookDiv(){return this._hookDiv}_createTouchHook(){const e=document.createElement("button");e.style.width="1px",e.style.height="1px",e.style.position="absolute",e.style.top="-1000px",e.style.left="-1000px",e.style.zIndex=2..toString(),e.style.backgroundColor="#FF0000",e.title="select to enable accessibility for this content",e.addEventListener("focus",(()=>{this._isMobileAccessibility=!0,this._activate(),this._destroyTouchHook()})),document.body.appendChild(e),this._hookDiv=e}_destroyTouchHook(){this._hookDiv&&(document.body.removeChild(this._hookDiv),this._hookDiv=null)}_activate(){if(this._isActive)return;this._isActive=!0,this._div||(this._div=document.createElement("div"),this._div.style.width="100px",this._div.style.height="100px",this._div.style.position="absolute",this._div.style.top="0px",this._div.style.left="0px",this._div.style.zIndex=2..toString(),this._div.style.pointerEvents="none"),this._activateOnTab&&(this._onKeyDown=this._onKeyDown.bind(this),globalThis.addEventListener("keydown",this._onKeyDown,!1)),this._deactivateOnMouseMove&&(this._onMouseMove=this._onMouseMove.bind(this),globalThis.document.addEventListener("mousemove",this._onMouseMove,!0));const e=this._renderer.view.canvas;if(e.parentNode)e.parentNode.appendChild(this._div),this._initAccessibilitySetup();else{const t=new MutationObserver((()=>{e.parentNode&&(e.parentNode.appendChild(this._div),t.disconnect(),this._initAccessibilitySetup())}));t.observe(document.body,{childList:!0,subtree:!0})}}_initAccessibilitySetup(){this._renderer.runners.postrender.add(this),this._renderer.lastObjectRendered&&this._updateAccessibleObjects(this._renderer.lastObjectRendered)}_deactivate(){if(this._isActive&&!this._isMobileAccessibility){this._isActive=!1,globalThis.document.removeEventListener("mousemove",this._onMouseMove,!0),this._activateOnTab&&globalThis.addEventListener("keydown",this._onKeyDown,!1),this._renderer.runners.postrender.remove(this);for(const e of this._children)e._accessibleDiv&&e._accessibleDiv.parentNode&&(e._accessibleDiv.parentNode.removeChild(e._accessibleDiv),e._accessibleDiv=null),e._accessibleActive=!1;this._pool.forEach((e=>{e.parentNode&&e.parentNode.removeChild(e)})),this._div&&this._div.parentNode&&this._div.parentNode.removeChild(this._div),this._pool=[],this._children=[]}}_updateAccessibleObjects(e){if(!e.visible||!e.accessibleChildren)return;e.accessible&&(e._accessibleActive||this._addChild(e),e._renderId=this._renderId);const t=e.children;if(t)for(let e=0;e<t.length;e++)this._updateAccessibleObjects(t[e])}init(t){const i={accessibilityOptions:{...e.defaultOptions,...t?.accessibilityOptions||{}}};this.debug=i.accessibilityOptions.debug,this._activateOnTab=i.accessibilityOptions.activateOnTab,this._deactivateOnMouseMove=i.accessibilityOptions.deactivateOnMouseMove,i.accessibilityOptions.enabledByDefault?this._activate():this._activateOnTab&&(this._onKeyDown=this._onKeyDown.bind(this),globalThis.addEventListener("keydown",this._onKeyDown,!1)),this._renderer.runners.postrender.remove(this)}postrender(){const e=performance.now();if(this._mobileInfo.android.device&&e<this._androidUpdateCount)return;if(this._androidUpdateCount=e+this._androidUpdateFrequency,!this._renderer.renderingToScreen||!this._renderer.view.canvas)return;const t=new Set;if(this._renderer.lastObjectRendered){this._updateAccessibleObjects(this._renderer.lastObjectRendered);for(const e of this._children)e._renderId===this._renderId&&t.add(this._children.indexOf(e))}for(let e=this._children.length-1;e>=0;e--){const i=this._children[e];t.has(e)||(i._accessibleDiv&&i._accessibleDiv.parentNode&&(i._accessibleDiv.parentNode.removeChild(i._accessibleDiv),this._pool.push(i._accessibleDiv),i._accessibleDiv=null),i._accessibleActive=!1,(0,P.d)(this._children,e,1))}if(this._renderer.renderingToScreen){const{x:e,y:t,width:i,height:n}=this._renderer.screen,r=this._div;r.style.left=`${e}px`,r.style.top=`${t}px`,r.style.width=`${i}px`,r.style.height=`${n}px`}for(let e=0;e<this._children.length;e++){const t=this._children[e];if(!t._accessibleActive||!t._accessibleDiv)continue;const i=t._accessibleDiv,n=t.hitArea||t.getBounds().rectangle;if(t.hitArea){const e=t.worldTransform,r=this._renderer.resolution,s=this._renderer.resolution;i.style.left=(e.tx+n.x*e.a)*r+"px",i.style.top=(e.ty+n.y*e.d)*s+"px",i.style.width=n.width*e.a*r+"px",i.style.height=n.height*e.d*s+"px"}else{this._capHitArea(n);const e=this._renderer.resolution,t=this._renderer.resolution;i.style.left=n.x*e+"px",i.style.top=n.y*t+"px",i.style.width=n.width*e+"px",i.style.height=n.height*t+"px"}}this._renderId++}_updateDebugHTML(e){e.innerHTML=`type: ${e.type}</br> title : ${e.title}</br> tabIndex: ${e.tabIndex}`}_capHitArea(e){e.x<0&&(e.width+=e.x,e.x=0),e.y<0&&(e.height+=e.y,e.y=0);const{width:t,height:i}=this._renderer;e.x+e.width>t&&(e.width=t-e.x),e.y+e.height>i&&(e.height=i-e.y)}_addChild(e){let t=this._pool.pop();t||("button"===e.accessibleType?t=document.createElement("button"):(t=document.createElement(e.accessibleType),t.style.cssText="\n                        color: transparent;\n                        pointer-events: none;\n                        padding: 0;\n                        margin: 0;\n                        border: 0;\n                        outline: 0;\n                        background: transparent;\n                        box-sizing: border-box;\n                        user-select: none;\n                        -webkit-user-select: none;\n                        -moz-user-select: none;\n                        -ms-user-select: none;\n                    ",e.accessibleText&&(t.innerText=e.accessibleText)),t.style.width="100px",t.style.height="100px",t.style.backgroundColor=this.debug?"rgba(255,255,255,0.5)":"transparent",t.style.position="absolute",t.style.zIndex=2..toString(),t.style.borderStyle="none",navigator.userAgent.toLowerCase().includes("chrome")?t.setAttribute("aria-live","off"):t.setAttribute("aria-live","polite"),navigator.userAgent.match(/rv:.*Gecko\//)?t.setAttribute("aria-relevant","additions"):t.setAttribute("aria-relevant","text"),t.addEventListener("click",this._onClick.bind(this)),t.addEventListener("focus",this._onFocus.bind(this)),t.addEventListener("focusout",this._onFocusOut.bind(this))),t.style.pointerEvents=e.accessiblePointerEvents,t.type=e.accessibleType,e.accessibleTitle&&null!==e.accessibleTitle?t.title=e.accessibleTitle:e.accessibleHint&&null!==e.accessibleHint||(t.title=`container ${e.tabIndex}`),e.accessibleHint&&null!==e.accessibleHint&&t.setAttribute("aria-label",e.accessibleHint),this.debug&&this._updateDebugHTML(t),e._accessibleActive=!0,e._accessibleDiv=t,t.container=e,this._children.push(e),this._div.appendChild(e._accessibleDiv),e.interactive&&(e._accessibleDiv.tabIndex=e.tabIndex)}_dispatchEvent(e,t){const{container:i}=e.target,n=this._renderer.events.rootBoundary,r=Object.assign(new o(n),{target:i});n.rootTarget=this._renderer.lastObjectRendered,t.forEach((e=>n.dispatchEvent(r,e)))}_onClick(e){this._dispatchEvent(e,["click","pointertap","tap"])}_onFocus(e){e.target.getAttribute("aria-live")||e.target.setAttribute("aria-live","assertive"),this._dispatchEvent(e,["mouseover"])}_onFocusOut(e){e.target.getAttribute("aria-live")||e.target.setAttribute("aria-live","polite"),this._dispatchEvent(e,["mouseout"])}_onKeyDown(e){9===e.keyCode&&this._activateOnTab&&this._activate()}_onMouseMove(e){0===e.movementX&&0===e.movementY||this._deactivate()}destroy(){this._deactivate(),this._destroyTouchHook(),this._div=null,this._pool=null,this._children=null,this._renderer=null,this._activateOnTab&&globalThis.removeEventListener("keydown",this._onKeyDown)}setAccessibilityEnabled(e){e?this._activate():this._deactivate()}};S.extension={type:[n.Ag.WebGLSystem,n.Ag.WebGPUSystem],name:"accessibility"},S.defaultOptions={enabledByDefault:!1,debug:!1,activateOnTab:!0,deactivateOnMouseMove:!0};let M=S;n.XO.add(M),n.XO.mixin(r.mc,{accessible:!1,accessibleTitle:null,accessibleHint:null,tabIndex:0,_accessibleActive:!1,_accessibleDiv:null,accessibleType:"button",accessibleText:null,accessiblePointerEvents:"auto",accessibleChildren:!0,_renderId:-1}),i(4732);var A=i(8875),C=i(268),B=i(4458),R=i(7309);const U=new class{constructor(){this.interactionFrequency=10,this._deltaTime=0,this._didMove=!1,this._tickerAdded=!1,this._pauseUpdate=!0}init(e){this.removeTickerListener(),this.events=e,this.interactionFrequency=10,this._deltaTime=0,this._didMove=!1,this._tickerAdded=!1,this._pauseUpdate=!0}get pauseUpdate(){return this._pauseUpdate}set pauseUpdate(e){this._pauseUpdate=e}addTickerListener(){!this._tickerAdded&&this.domElement&&(R.R.system.add(this._tickerUpdate,this,B.d.INTERACTION),this._tickerAdded=!0)}removeTickerListener(){this._tickerAdded&&(R.R.system.remove(this._tickerUpdate,this),this._tickerAdded=!1)}pointerMoved(){this._didMove=!0}_update(){if(!this.domElement||this._pauseUpdate)return;if(this._didMove)return void(this._didMove=!1);const e=this.events._rootPointerEvent;this.events.supportsTouchEvents&&"touch"===e.pointerType||globalThis.document.dispatchEvent(new PointerEvent("pointermove",{clientX:e.clientX,clientY:e.clientY,pointerType:e.pointerType,pointerId:e.pointerId}))}_tickerUpdate(e){this._deltaTime+=e.deltaTime,this._deltaTime<this.interactionFrequency||(this._deltaTime=0,this._update())}};class k extends o{constructor(){super(...arguments),this.client=new s.b,this.movement=new s.b,this.offset=new s.b,this.global=new s.b,this.screen=new s.b}get clientX(){return this.client.x}get clientY(){return this.client.y}get x(){return this.clientX}get y(){return this.clientY}get movementX(){return this.movement.x}get movementY(){return this.movement.y}get offsetX(){return this.offset.x}get offsetY(){return this.offset.y}get globalX(){return this.global.x}get globalY(){return this.global.y}get screenX(){return this.screen.x}get screenY(){return this.screen.y}getLocalPosition(e,t,i){return e.worldTransform.applyInverse(i||this.global,t)}getModifierState(e){return"getModifierState"in this.nativeEvent&&this.nativeEvent.getModifierState(e)}initMouseEvent(e,t,i,n,r,s,o,a,h,l,d,u,c,p,g){throw new Error("Method not implemented.")}}class O extends k{constructor(){super(...arguments),this.width=0,this.height=0,this.isPrimary=!1}getCoalescedEvents(){return"pointermove"===this.type||"mousemove"===this.type||"touchmove"===this.type?[this]:[]}getPredictedEvents(){throw new Error("getPredictedEvents is not supported!")}}class D extends k{constructor(){super(...arguments),this.DOM_DELTA_PIXEL=0,this.DOM_DELTA_LINE=1,this.DOM_DELTA_PAGE=2}}D.DOM_DELTA_PIXEL=0,D.DOM_DELTA_LINE=1,D.DOM_DELTA_PAGE=2;const F=new s.b,I=new s.b;class L{constructor(e){this.dispatch=new A.A,this.moveOnAll=!1,this.enableGlobalMoveEvents=!0,this.mappingState={trackingData:{}},this.eventPool=new Map,this._allInteractiveElements=[],this._hitElements=[],this._isPointerMoveEvent=!1,this.rootTarget=e,this.hitPruneFn=this.hitPruneFn.bind(this),this.hitTestFn=this.hitTestFn.bind(this),this.mapPointerDown=this.mapPointerDown.bind(this),this.mapPointerMove=this.mapPointerMove.bind(this),this.mapPointerOut=this.mapPointerOut.bind(this),this.mapPointerOver=this.mapPointerOver.bind(this),this.mapPointerUp=this.mapPointerUp.bind(this),this.mapPointerUpOutside=this.mapPointerUpOutside.bind(this),this.mapWheel=this.mapWheel.bind(this),this.mappingTable={},this.addEventMapping("pointerdown",this.mapPointerDown),this.addEventMapping("pointermove",this.mapPointerMove),this.addEventMapping("pointerout",this.mapPointerOut),this.addEventMapping("pointerleave",this.mapPointerOut),this.addEventMapping("pointerover",this.mapPointerOver),this.addEventMapping("pointerup",this.mapPointerUp),this.addEventMapping("pointerupoutside",this.mapPointerUpOutside),this.addEventMapping("wheel",this.mapWheel)}addEventMapping(e,t){this.mappingTable[e]||(this.mappingTable[e]=[]),this.mappingTable[e].push({fn:t,priority:0}),this.mappingTable[e].sort(((e,t)=>e.priority-t.priority))}dispatchEvent(e,t){e.propagationStopped=!1,e.propagationImmediatelyStopped=!1,this.propagate(e,t),this.dispatch.emit(t||e.type,e)}mapEvent(e){if(!this.rootTarget)return;const t=this.mappingTable[e.type];if(t)for(let i=0,n=t.length;i<n;i++)t[i].fn(e);else(0,C.R)(`[EventBoundary]: Event mapping not defined for ${e.type}`)}hitTest(e,t){U.pauseUpdate=!0;const i=this[this._isPointerMoveEvent&&this.enableGlobalMoveEvents?"hitTestMoveRecursive":"hitTestRecursive"](this.rootTarget,this.rootTarget.eventMode,F.set(e,t),this.hitTestFn,this.hitPruneFn);return i&&i[0]}propagate(e,t){if(!e.target)return;const i=e.composedPath();e.eventPhase=e.CAPTURING_PHASE;for(let n=0,r=i.length-1;n<r;n++)if(e.currentTarget=i[n],this.notifyTarget(e,t),e.propagationStopped||e.propagationImmediatelyStopped)return;if(e.eventPhase=e.AT_TARGET,e.currentTarget=e.target,this.notifyTarget(e,t),!e.propagationStopped&&!e.propagationImmediatelyStopped){e.eventPhase=e.BUBBLING_PHASE;for(let n=i.length-2;n>=0;n--)if(e.currentTarget=i[n],this.notifyTarget(e,t),e.propagationStopped||e.propagationImmediatelyStopped)return}}all(e,t,i=this._allInteractiveElements){if(0===i.length)return;e.eventPhase=e.BUBBLING_PHASE;const n=Array.isArray(t)?t:[t];for(let t=i.length-1;t>=0;t--)n.forEach((n=>{e.currentTarget=i[t],this.notifyTarget(e,n)}))}propagationPath(e){const t=[e];for(let i=0;i<2048&&e!==this.rootTarget&&e.parent;i++){if(!e.parent)throw new Error("Cannot find propagation path to disconnected target");t.push(e.parent),e=e.parent}return t.reverse(),t}hitTestMoveRecursive(e,t,i,n,r,s=!1){let o=!1;if(this._interactivePrune(e))return null;if("dynamic"!==e.eventMode&&"dynamic"!==t||(U.pauseUpdate=!1),e.interactiveChildren&&e.children){const a=e.children;for(let h=a.length-1;h>=0;h--){const l=a[h],d=this.hitTestMoveRecursive(l,this._isInteractive(t)?t:l.eventMode,i,n,r,s||r(e,i));if(d){if(d.length>0&&!d[d.length-1].parent)continue;const t=e.isInteractive();(d.length>0||t)&&(t&&this._allInteractiveElements.push(e),d.push(e)),0===this._hitElements.length&&(this._hitElements=d),o=!0}}}const a=this._isInteractive(t),h=e.isInteractive();return h&&h&&this._allInteractiveElements.push(e),s||this._hitElements.length>0?null:o?this._hitElements:a&&!r(e,i)&&n(e,i)?h?[e]:[]:null}hitTestRecursive(e,t,i,n,r){if(this._interactivePrune(e)||r(e,i))return null;if("dynamic"!==e.eventMode&&"dynamic"!==t||(U.pauseUpdate=!1),e.interactiveChildren&&e.children){const s=e.children,o=i;for(let i=s.length-1;i>=0;i--){const a=s[i],h=this.hitTestRecursive(a,this._isInteractive(t)?t:a.eventMode,o,n,r);if(h){if(h.length>0&&!h[h.length-1].parent)continue;const t=e.isInteractive();return(h.length>0||t)&&h.push(e),h}}}const s=this._isInteractive(t),o=e.isInteractive();return s&&n(e,i)?o?[e]:[]:null}_isInteractive(e){return"static"===e||"dynamic"===e}_interactivePrune(e){return!(e&&e.visible&&e.renderable&&e.measurable)||"none"===e.eventMode||"passive"===e.eventMode&&!e.interactiveChildren}hitPruneFn(e,t){if(e.hitArea&&(e.worldTransform.applyInverse(t,I),!e.hitArea.contains(I.x,I.y)))return!0;if(e.effects&&e.effects.length)for(let i=0;i<e.effects.length;i++){const n=e.effects[i];if(n.containsPoint&&!n.containsPoint(t,this.hitTestFn))return!0}return!1}hitTestFn(e,t){return!!e.hitArea||!!e?.containsPoint&&(e.worldTransform.applyInverse(t,I),e.containsPoint(I))}notifyTarget(e,t){if(!e.currentTarget.isInteractive())return;t??(t=e.type);const i=`on${t}`;e.currentTarget[i]?.(e);const n=e.eventPhase===e.CAPTURING_PHASE||e.eventPhase===e.AT_TARGET?`${t}capture`:t;this._notifyListeners(e,n),e.eventPhase===e.AT_TARGET&&this._notifyListeners(e,t)}mapPointerDown(e){if(!(e instanceof O))return void(0,C.R)("EventBoundary cannot map a non-pointer event as a pointer event");const t=this.createPointerEvent(e);if(this.dispatchEvent(t,"pointerdown"),"touch"===t.pointerType)this.dispatchEvent(t,"touchstart");else if("mouse"===t.pointerType||"pen"===t.pointerType){const e=2===t.button;this.dispatchEvent(t,e?"rightdown":"mousedown")}this.trackingData(e.pointerId).pressTargetsByButton[e.button]=t.composedPath(),this.freeEvent(t)}mapPointerMove(e){if(!(e instanceof O))return void(0,C.R)("EventBoundary cannot map a non-pointer event as a pointer event");this._allInteractiveElements.length=0,this._hitElements.length=0,this._isPointerMoveEvent=!0;const t=this.createPointerEvent(e);this._isPointerMoveEvent=!1;const i="mouse"===t.pointerType||"pen"===t.pointerType,n=this.trackingData(e.pointerId),r=this.findMountedTarget(n.overTargets);if(n.overTargets?.length>0&&r!==t.target){const n="mousemove"===e.type?"mouseout":"pointerout",s=this.createPointerEvent(e,n,r);if(this.dispatchEvent(s,"pointerout"),i&&this.dispatchEvent(s,"mouseout"),!t.composedPath().includes(r)){const n=this.createPointerEvent(e,"pointerleave",r);for(n.eventPhase=n.AT_TARGET;n.target&&!t.composedPath().includes(n.target);)n.currentTarget=n.target,this.notifyTarget(n),i&&this.notifyTarget(n,"mouseleave"),n.target=n.target.parent;this.freeEvent(n)}this.freeEvent(s)}if(r!==t.target){const n="mousemove"===e.type?"mouseover":"pointerover",s=this.clonePointerEvent(t,n);this.dispatchEvent(s,"pointerover"),i&&this.dispatchEvent(s,"mouseover");let o=r?.parent;for(;o&&o!==this.rootTarget.parent&&o!==t.target;)o=o.parent;if(!o||o===this.rootTarget.parent){const e=this.clonePointerEvent(t,"pointerenter");for(e.eventPhase=e.AT_TARGET;e.target&&e.target!==r&&e.target!==this.rootTarget.parent;)e.currentTarget=e.target,this.notifyTarget(e),i&&this.notifyTarget(e,"mouseenter"),e.target=e.target.parent;this.freeEvent(e)}this.freeEvent(s)}const s=[],o=this.enableGlobalMoveEvents??!0;this.moveOnAll?s.push("pointermove"):this.dispatchEvent(t,"pointermove"),o&&s.push("globalpointermove"),"touch"===t.pointerType&&(this.moveOnAll?s.splice(1,0,"touchmove"):this.dispatchEvent(t,"touchmove"),o&&s.push("globaltouchmove")),i&&(this.moveOnAll?s.splice(1,0,"mousemove"):this.dispatchEvent(t,"mousemove"),o&&s.push("globalmousemove"),this.cursor=t.target?.cursor),s.length>0&&this.all(t,s),this._allInteractiveElements.length=0,this._hitElements.length=0,n.overTargets=t.composedPath(),this.freeEvent(t)}mapPointerOver(e){if(!(e instanceof O))return void(0,C.R)("EventBoundary cannot map a non-pointer event as a pointer event");const t=this.trackingData(e.pointerId),i=this.createPointerEvent(e),n="mouse"===i.pointerType||"pen"===i.pointerType;this.dispatchEvent(i,"pointerover"),n&&this.dispatchEvent(i,"mouseover"),"mouse"===i.pointerType&&(this.cursor=i.target?.cursor);const r=this.clonePointerEvent(i,"pointerenter");for(r.eventPhase=r.AT_TARGET;r.target&&r.target!==this.rootTarget.parent;)r.currentTarget=r.target,this.notifyTarget(r),n&&this.notifyTarget(r,"mouseenter"),r.target=r.target.parent;t.overTargets=i.composedPath(),this.freeEvent(i),this.freeEvent(r)}mapPointerOut(e){if(!(e instanceof O))return void(0,C.R)("EventBoundary cannot map a non-pointer event as a pointer event");const t=this.trackingData(e.pointerId);if(t.overTargets){const i="mouse"===e.pointerType||"pen"===e.pointerType,n=this.findMountedTarget(t.overTargets),r=this.createPointerEvent(e,"pointerout",n);this.dispatchEvent(r),i&&this.dispatchEvent(r,"mouseout");const s=this.createPointerEvent(e,"pointerleave",n);for(s.eventPhase=s.AT_TARGET;s.target&&s.target!==this.rootTarget.parent;)s.currentTarget=s.target,this.notifyTarget(s),i&&this.notifyTarget(s,"mouseleave"),s.target=s.target.parent;t.overTargets=null,this.freeEvent(r),this.freeEvent(s)}this.cursor=null}mapPointerUp(e){if(!(e instanceof O))return void(0,C.R)("EventBoundary cannot map a non-pointer event as a pointer event");const t=performance.now(),i=this.createPointerEvent(e);if(this.dispatchEvent(i,"pointerup"),"touch"===i.pointerType)this.dispatchEvent(i,"touchend");else if("mouse"===i.pointerType||"pen"===i.pointerType){const e=2===i.button;this.dispatchEvent(i,e?"rightup":"mouseup")}const n=this.trackingData(e.pointerId),r=this.findMountedTarget(n.pressTargetsByButton[e.button]);let s=r;if(r&&!i.composedPath().includes(r)){let t=r;for(;t&&!i.composedPath().includes(t);){if(i.currentTarget=t,this.notifyTarget(i,"pointerupoutside"),"touch"===i.pointerType)this.notifyTarget(i,"touchendoutside");else if("mouse"===i.pointerType||"pen"===i.pointerType){const e=2===i.button;this.notifyTarget(i,e?"rightupoutside":"mouseupoutside")}t=t.parent}delete n.pressTargetsByButton[e.button],s=t}if(s){const r=this.clonePointerEvent(i,"click");r.target=s,r.path=null,n.clicksByButton[e.button]||(n.clicksByButton[e.button]={clickCount:0,target:r.target,timeStamp:t});const o=n.clicksByButton[e.button];if(o.target===r.target&&t-o.timeStamp<200?++o.clickCount:o.clickCount=1,o.target=r.target,o.timeStamp=t,r.detail=o.clickCount,"mouse"===r.pointerType){const e=2===r.button;this.dispatchEvent(r,e?"rightclick":"click")}else"touch"===r.pointerType&&this.dispatchEvent(r,"tap");this.dispatchEvent(r,"pointertap"),this.freeEvent(r)}this.freeEvent(i)}mapPointerUpOutside(e){if(!(e instanceof O))return void(0,C.R)("EventBoundary cannot map a non-pointer event as a pointer event");const t=this.trackingData(e.pointerId),i=this.findMountedTarget(t.pressTargetsByButton[e.button]),n=this.createPointerEvent(e);if(i){let r=i;for(;r;)n.currentTarget=r,this.notifyTarget(n,"pointerupoutside"),"touch"===n.pointerType?this.notifyTarget(n,"touchendoutside"):"mouse"!==n.pointerType&&"pen"!==n.pointerType||this.notifyTarget(n,2===n.button?"rightupoutside":"mouseupoutside"),r=r.parent;delete t.pressTargetsByButton[e.button]}this.freeEvent(n)}mapWheel(e){if(!(e instanceof D))return void(0,C.R)("EventBoundary cannot map a non-wheel event as a wheel event");const t=this.createWheelEvent(e);this.dispatchEvent(t),this.freeEvent(t)}findMountedTarget(e){if(!e)return null;let t=e[0];for(let i=1;i<e.length&&e[i].parent===t;i++)t=e[i];return t}createPointerEvent(e,t,i){const n=this.allocateEvent(O);return this.copyPointerData(e,n),this.copyMouseData(e,n),this.copyData(e,n),n.nativeEvent=e.nativeEvent,n.originalEvent=e,n.target=i??this.hitTest(n.global.x,n.global.y)??this._hitElements[0],"string"==typeof t&&(n.type=t),n}createWheelEvent(e){const t=this.allocateEvent(D);return this.copyWheelData(e,t),this.copyMouseData(e,t),this.copyData(e,t),t.nativeEvent=e.nativeEvent,t.originalEvent=e,t.target=this.hitTest(t.global.x,t.global.y),t}clonePointerEvent(e,t){const i=this.allocateEvent(O);return i.nativeEvent=e.nativeEvent,i.originalEvent=e.originalEvent,this.copyPointerData(e,i),this.copyMouseData(e,i),this.copyData(e,i),i.target=e.target,i.path=e.composedPath().slice(),i.type=t??i.type,i}copyWheelData(e,t){t.deltaMode=e.deltaMode,t.deltaX=e.deltaX,t.deltaY=e.deltaY,t.deltaZ=e.deltaZ}copyPointerData(e,t){e instanceof O&&t instanceof O&&(t.pointerId=e.pointerId,t.width=e.width,t.height=e.height,t.isPrimary=e.isPrimary,t.pointerType=e.pointerType,t.pressure=e.pressure,t.tangentialPressure=e.tangentialPressure,t.tiltX=e.tiltX,t.tiltY=e.tiltY,t.twist=e.twist)}copyMouseData(e,t){e instanceof k&&t instanceof k&&(t.altKey=e.altKey,t.button=e.button,t.buttons=e.buttons,t.client.copyFrom(e.client),t.ctrlKey=e.ctrlKey,t.metaKey=e.metaKey,t.movement.copyFrom(e.movement),t.screen.copyFrom(e.screen),t.shiftKey=e.shiftKey,t.global.copyFrom(e.global))}copyData(e,t){t.isTrusted=e.isTrusted,t.srcElement=e.srcElement,t.timeStamp=performance.now(),t.type=e.type,t.detail=e.detail,t.view=e.view,t.which=e.which,t.layer.copyFrom(e.layer),t.page.copyFrom(e.page)}trackingData(e){return this.mappingState.trackingData[e]||(this.mappingState.trackingData[e]={pressTargetsByButton:{},clicksByButton:{},overTarget:null}),this.mappingState.trackingData[e]}allocateEvent(e){this.eventPool.has(e)||this.eventPool.set(e,[]);const t=this.eventPool.get(e).pop()||new e(this);return t.eventPhase=t.NONE,t.currentTarget=null,t.defaultPrevented=!1,t.path=null,t.target=null,t}freeEvent(e){if(e.manager!==this)throw new Error("It is illegal to free an event not managed by this EventBoundary!");const t=e.constructor;this.eventPool.has(t)||this.eventPool.set(t,[]),this.eventPool.get(t).push(e)}_notifyListeners(e,t){const i=e.currentTarget._events[t];if(i)if("fn"in i)i.once&&e.currentTarget.removeListener(t,i.fn,void 0,!0),i.fn.call(i.context,e);else for(let n=0,r=i.length;n<r&&!e.propagationImmediatelyStopped;n++)i[n].once&&e.currentTarget.removeListener(t,i[n].fn,void 0,!0),i[n].fn.call(i[n].context,e)}}const G={touchstart:"pointerdown",touchend:"pointerup",touchendoutside:"pointerupoutside",touchmove:"pointermove",touchcancel:"pointercancel"},H=class e{constructor(t){this.supportsTouchEvents="ontouchstart"in globalThis,this.supportsPointerEvents=!!globalThis.PointerEvent,this.domElement=null,this.resolution=1,this.renderer=t,this.rootBoundary=new L(null),U.init(this),this.autoPreventDefault=!0,this._eventsAdded=!1,this._rootPointerEvent=new O(null),this._rootWheelEvent=new D(null),this.cursorStyles={default:"inherit",pointer:"pointer"},this.features=new Proxy({...e.defaultEventFeatures},{set:(e,t,i)=>("globalMove"===t&&(this.rootBoundary.enableGlobalMoveEvents=i),e[t]=i,!0)}),this._onPointerDown=this._onPointerDown.bind(this),this._onPointerMove=this._onPointerMove.bind(this),this._onPointerUp=this._onPointerUp.bind(this),this._onPointerOverOut=this._onPointerOverOut.bind(this),this.onWheel=this.onWheel.bind(this)}static get defaultEventMode(){return this._defaultEventMode}init(t){const{canvas:i,resolution:n}=this.renderer;this.setTargetElement(i),this.resolution=n,e._defaultEventMode=t.eventMode??"passive",Object.assign(this.features,t.eventFeatures??{}),this.rootBoundary.enableGlobalMoveEvents=this.features.globalMove}resolutionChange(e){this.resolution=e}destroy(){this.setTargetElement(null),this.renderer=null,this._currentCursor=null}setCursor(e){e||(e="default");let t=!0;if(globalThis.OffscreenCanvas&&this.domElement instanceof OffscreenCanvas&&(t=!1),this._currentCursor===e)return;this._currentCursor=e;const i=this.cursorStyles[e];if(i)switch(typeof i){case"string":t&&(this.domElement.style.cursor=i);break;case"function":i(e);break;case"object":t&&Object.assign(this.domElement.style,i)}else t&&"string"==typeof e&&!Object.prototype.hasOwnProperty.call(this.cursorStyles,e)&&(this.domElement.style.cursor=e)}get pointer(){return this._rootPointerEvent}_onPointerDown(e){if(!this.features.click)return;this.rootBoundary.rootTarget=this.renderer.lastObjectRendered;const t=this._normalizeToPointerData(e);this.autoPreventDefault&&t[0].isNormalized&&(e.cancelable||!("cancelable"in e))&&e.preventDefault();for(let e=0,i=t.length;e<i;e++){const i=t[e],n=this._bootstrapEvent(this._rootPointerEvent,i);this.rootBoundary.mapEvent(n)}this.setCursor(this.rootBoundary.cursor)}_onPointerMove(e){if(!this.features.move)return;this.rootBoundary.rootTarget=this.renderer.lastObjectRendered,U.pointerMoved();const t=this._normalizeToPointerData(e);for(let e=0,i=t.length;e<i;e++){const i=this._bootstrapEvent(this._rootPointerEvent,t[e]);this.rootBoundary.mapEvent(i)}this.setCursor(this.rootBoundary.cursor)}_onPointerUp(e){if(!this.features.click)return;this.rootBoundary.rootTarget=this.renderer.lastObjectRendered;let t=e.target;e.composedPath&&e.composedPath().length>0&&(t=e.composedPath()[0]);const i=t!==this.domElement?"outside":"",n=this._normalizeToPointerData(e);for(let e=0,t=n.length;e<t;e++){const t=this._bootstrapEvent(this._rootPointerEvent,n[e]);t.type+=i,this.rootBoundary.mapEvent(t)}this.setCursor(this.rootBoundary.cursor)}_onPointerOverOut(e){if(!this.features.click)return;this.rootBoundary.rootTarget=this.renderer.lastObjectRendered;const t=this._normalizeToPointerData(e);for(let e=0,i=t.length;e<i;e++){const i=this._bootstrapEvent(this._rootPointerEvent,t[e]);this.rootBoundary.mapEvent(i)}this.setCursor(this.rootBoundary.cursor)}onWheel(e){if(!this.features.wheel)return;const t=this.normalizeWheelEvent(e);this.rootBoundary.rootTarget=this.renderer.lastObjectRendered,this.rootBoundary.mapEvent(t)}setTargetElement(e){this._removeEvents(),this.domElement=e,U.domElement=e,this._addEvents()}_addEvents(){if(this._eventsAdded||!this.domElement)return;U.addTickerListener();const e=this.domElement.style;e&&(globalThis.navigator.msPointerEnabled?(e.msContentZooming="none",e.msTouchAction="none"):this.supportsPointerEvents&&(e.touchAction="none")),this.supportsPointerEvents?(globalThis.document.addEventListener("pointermove",this._onPointerMove,!0),this.domElement.addEventListener("pointerdown",this._onPointerDown,!0),this.domElement.addEventListener("pointerleave",this._onPointerOverOut,!0),this.domElement.addEventListener("pointerover",this._onPointerOverOut,!0),globalThis.addEventListener("pointerup",this._onPointerUp,!0)):(globalThis.document.addEventListener("mousemove",this._onPointerMove,!0),this.domElement.addEventListener("mousedown",this._onPointerDown,!0),this.domElement.addEventListener("mouseout",this._onPointerOverOut,!0),this.domElement.addEventListener("mouseover",this._onPointerOverOut,!0),globalThis.addEventListener("mouseup",this._onPointerUp,!0),this.supportsTouchEvents&&(this.domElement.addEventListener("touchstart",this._onPointerDown,!0),this.domElement.addEventListener("touchend",this._onPointerUp,!0),this.domElement.addEventListener("touchmove",this._onPointerMove,!0))),this.domElement.addEventListener("wheel",this.onWheel,{passive:!0,capture:!0}),this._eventsAdded=!0}_removeEvents(){if(!this._eventsAdded||!this.domElement)return;U.removeTickerListener();const e=this.domElement.style;e&&(globalThis.navigator.msPointerEnabled?(e.msContentZooming="",e.msTouchAction=""):this.supportsPointerEvents&&(e.touchAction="")),this.supportsPointerEvents?(globalThis.document.removeEventListener("pointermove",this._onPointerMove,!0),this.domElement.removeEventListener("pointerdown",this._onPointerDown,!0),this.domElement.removeEventListener("pointerleave",this._onPointerOverOut,!0),this.domElement.removeEventListener("pointerover",this._onPointerOverOut,!0),globalThis.removeEventListener("pointerup",this._onPointerUp,!0)):(globalThis.document.removeEventListener("mousemove",this._onPointerMove,!0),this.domElement.removeEventListener("mousedown",this._onPointerDown,!0),this.domElement.removeEventListener("mouseout",this._onPointerOverOut,!0),this.domElement.removeEventListener("mouseover",this._onPointerOverOut,!0),globalThis.removeEventListener("mouseup",this._onPointerUp,!0),this.supportsTouchEvents&&(this.domElement.removeEventListener("touchstart",this._onPointerDown,!0),this.domElement.removeEventListener("touchend",this._onPointerUp,!0),this.domElement.removeEventListener("touchmove",this._onPointerMove,!0))),this.domElement.removeEventListener("wheel",this.onWheel,!0),this.domElement=null,this._eventsAdded=!1}mapPositionToPoint(e,t,i){const n=this.domElement.isConnected?this.domElement.getBoundingClientRect():{x:0,y:0,width:this.domElement.width,height:this.domElement.height,left:0,top:0},r=1/this.resolution;e.x=(t-n.left)*(this.domElement.width/n.width)*r,e.y=(i-n.top)*(this.domElement.height/n.height)*r}_normalizeToPointerData(e){const t=[];if(this.supportsTouchEvents&&e instanceof TouchEvent)for(let i=0,n=e.changedTouches.length;i<n;i++){const n=e.changedTouches[i];void 0===n.button&&(n.button=0),void 0===n.buttons&&(n.buttons=1),void 0===n.isPrimary&&(n.isPrimary=1===e.touches.length&&"touchstart"===e.type),void 0===n.width&&(n.width=n.radiusX||1),void 0===n.height&&(n.height=n.radiusY||1),void 0===n.tiltX&&(n.tiltX=0),void 0===n.tiltY&&(n.tiltY=0),void 0===n.pointerType&&(n.pointerType="touch"),void 0===n.pointerId&&(n.pointerId=n.identifier||0),void 0===n.pressure&&(n.pressure=n.force||.5),void 0===n.twist&&(n.twist=0),void 0===n.tangentialPressure&&(n.tangentialPressure=0),void 0===n.layerX&&(n.layerX=n.offsetX=n.clientX),void 0===n.layerY&&(n.layerY=n.offsetY=n.clientY),n.isNormalized=!0,n.type=e.type,t.push(n)}else if(!globalThis.MouseEvent||e instanceof MouseEvent&&!(this.supportsPointerEvents&&e instanceof globalThis.PointerEvent)){const i=e;void 0===i.isPrimary&&(i.isPrimary=!0),void 0===i.width&&(i.width=1),void 0===i.height&&(i.height=1),void 0===i.tiltX&&(i.tiltX=0),void 0===i.tiltY&&(i.tiltY=0),void 0===i.pointerType&&(i.pointerType="mouse"),void 0===i.pointerId&&(i.pointerId=1),void 0===i.pressure&&(i.pressure=.5),void 0===i.twist&&(i.twist=0),void 0===i.tangentialPressure&&(i.tangentialPressure=0),i.isNormalized=!0,t.push(i)}else t.push(e);return t}normalizeWheelEvent(e){const t=this._rootWheelEvent;return this._transferMouseData(t,e),t.deltaX=e.deltaX,t.deltaY=e.deltaY,t.deltaZ=e.deltaZ,t.deltaMode=e.deltaMode,this.mapPositionToPoint(t.screen,e.clientX,e.clientY),t.global.copyFrom(t.screen),t.offset.copyFrom(t.screen),t.nativeEvent=e,t.type=e.type,t}_bootstrapEvent(e,t){return e.originalEvent=null,e.nativeEvent=t,e.pointerId=t.pointerId,e.width=t.width,e.height=t.height,e.isPrimary=t.isPrimary,e.pointerType=t.pointerType,e.pressure=t.pressure,e.tangentialPressure=t.tangentialPressure,e.tiltX=t.tiltX,e.tiltY=t.tiltY,e.twist=t.twist,this._transferMouseData(e,t),this.mapPositionToPoint(e.screen,t.clientX,t.clientY),e.global.copyFrom(e.screen),e.offset.copyFrom(e.screen),e.isTrusted=t.isTrusted,"pointerleave"===e.type&&(e.type="pointerout"),e.type.startsWith("mouse")&&(e.type=e.type.replace("mouse","pointer")),e.type.startsWith("touch")&&(e.type=G[e.type]||e.type),e}_transferMouseData(e,t){e.isTrusted=t.isTrusted,e.srcElement=t.srcElement,e.timeStamp=performance.now(),e.type=t.type,e.altKey=t.altKey,e.button=t.button,e.buttons=t.buttons,e.client.x=t.clientX,e.client.y=t.clientY,e.ctrlKey=t.ctrlKey,e.metaKey=t.metaKey,e.movement.x=t.movementX,e.movement.y=t.movementY,e.page.x=t.pageX,e.page.y=t.pageY,e.relatedTarget=null,e.shiftKey=t.shiftKey}};H.extension={name:"events",type:[n.Ag.WebGLSystem,n.Ag.CanvasSystem,n.Ag.WebGPUSystem],priority:-1},H.defaultEventFeatures={move:!0,globalMove:!0,click:!0,wheel:!0};let W=H;const z={onclick:null,onmousedown:null,onmouseenter:null,onmouseleave:null,onmousemove:null,onglobalmousemove:null,onmouseout:null,onmouseover:null,onmouseup:null,onmouseupoutside:null,onpointercancel:null,onpointerdown:null,onpointerenter:null,onpointerleave:null,onpointermove:null,onglobalpointermove:null,onpointerout:null,onpointerover:null,onpointertap:null,onpointerup:null,onpointerupoutside:null,onrightclick:null,onrightdown:null,onrightup:null,onrightupoutside:null,ontap:null,ontouchcancel:null,ontouchend:null,ontouchendoutside:null,ontouchmove:null,onglobaltouchmove:null,ontouchstart:null,onwheel:null,get interactive(){return"dynamic"===this.eventMode||"static"===this.eventMode},set interactive(e){this.eventMode=e?"static":"passive"},_internalEventMode:void 0,get eventMode(){return this._internalEventMode??W.defaultEventMode},set eventMode(e){this._internalEventMode=e},isInteractive(){return"static"===this.eventMode||"dynamic"===this.eventMode},interactiveChildren:!0,hitArea:null,addEventListener(e,t,i){const n="boolean"==typeof i&&i||"object"==typeof i&&i.capture,r="object"==typeof i?i.signal:void 0,s="object"==typeof i&&!0===i.once,o="function"==typeof t?void 0:t;e=n?`${e}capture`:e;const a="function"==typeof t?t:t.handleEvent,h=this;r&&r.addEventListener("abort",(()=>{h.off(e,a,o)})),s?h.once(e,a,o):h.on(e,a,o)},removeEventListener(e,t,i){const n="function"==typeof t?void 0:t;e="boolean"==typeof i&&i||"object"==typeof i&&i.capture?`${e}capture`:e,t="function"==typeof t?t:t.handleEvent,this.off(e,t,n)},dispatchEvent(e){if(!(e instanceof o))throw new Error("Container cannot propagate events outside of the Federated Events API");return e.defaultPrevented=!1,e.path=null,e.target=this,e.manager.dispatchEvent(e),!e.defaultPrevented}};n.XO.add(W),n.XO.mixin(r.mc,z);class X{constructor(e){this._destroyRenderableBound=this.destroyRenderable.bind(this),this._attachedDomElements=[],this._renderer=e,this._renderer.runners.postrender.add(this),this._domElement=document.createElement("div"),this._domElement.style.position="absolute",this._domElement.style.top="0",this._domElement.style.left="0",this._domElement.style.pointerEvents="none",this._domElement.style.zIndex="1000"}addRenderable(e,t){this._attachedDomElements.includes(e)||(this._attachedDomElements.push(e),e.on("destroyed",this._destroyRenderableBound))}updateRenderable(e){}validateRenderable(e){return!0}destroyRenderable(e){const t=this._attachedDomElements.indexOf(e);-1!==t&&this._attachedDomElements.splice(t,1),e.off("destroyed",this._destroyRenderableBound)}postrender(){const e=this._attachedDomElements;if(0===e.length)return void this._domElement.remove();const t=this._renderer.view.canvas;this._domElement.parentNode!==t.parentNode&&t.parentNode?.appendChild(this._domElement),this._domElement.style.transform=`translate(${t.offsetLeft}px, ${t.offsetTop}px)`;for(let t=0;t<e.length;t++){const i=e[t],n=i.element;if(!i.parent||i.globalDisplayStatus<7)n.remove(),e.splice(t,1),t--;else{this._domElement.contains(n)||(n.style.position="absolute",n.style.pointerEvents="auto",this._domElement.appendChild(n));const e=i.worldTransform,t=i._anchor,r=i.width*t.x,s=i.height*t.y;n.style.transformOrigin=`${r}px ${s}px`,n.style.transform=`matrix(${e.a}, ${e.b}, ${e.c}, ${e.d}, ${e.tx-r}, ${e.ty-s})`,n.style.opacity=i.groupAlpha.toString()}}}destroy(){this._renderer.runners.postrender.remove(this);for(let e=0;e<this._attachedDomElements.length;e++){const t=this._attachedDomElements[e];t.off("destroyed",this._destroyRenderableBound),t.element.remove()}this._attachedDomElements.length=0,this._domElement.remove(),this._renderer=null}}X.extension={type:[n.Ag.WebGLPipes,n.Ag.WebGPUPipes,n.Ag.CanvasPipes],name:"dom"},n.XO.add(X),i(9010),i(8480),i(8928),i(5285),i(9305),i(6958),i(6444),i(9147),i(8723),i(7252),i(4980)},6444:(e,t,i)=>{var n=i(8507),r=i(1979),s=i(8218),o=i(9408),a=i(9313),h=i(6563),l=i(5611),d=i(4459),u=i(4e3),c=i(6665),p=i(6040),g=i(8475),m=i(5811);const f={name:"local-uniform-msdf-bit",vertex:{header:"\n            struct LocalUniforms {\n                uColor:vec4<f32>,\n                uTransformMatrix:mat3x3<f32>,\n                uDistance: f32,\n                uRound:f32,\n            }\n\n            @group(2) @binding(0) var<uniform> localUniforms : LocalUniforms;\n        ",main:"\n            vColor *= localUniforms.uColor;\n            modelMatrix *= localUniforms.uTransformMatrix;\n        ",end:"\n            if(localUniforms.uRound == 1)\n            {\n                vPosition = vec4(roundPixels(vPosition.xy, globalUniforms.uResolution), vPosition.zw);\n            }\n        "},fragment:{header:"\n            struct LocalUniforms {\n                uColor:vec4<f32>,\n                uTransformMatrix:mat3x3<f32>,\n                uDistance: f32\n            }\n\n            @group(2) @binding(0) var<uniform> localUniforms : LocalUniforms;\n         ",main:" \n            outColor = vec4<f32>(calculateMSDFAlpha(outColor, localUniforms.uColor, localUniforms.uDistance));\n        "}},v={name:"local-uniform-msdf-bit",vertex:{header:"\n            uniform mat3 uTransformMatrix;\n            uniform vec4 uColor;\n            uniform float uRound;\n        ",main:"\n            vColor *= uColor;\n            modelMatrix *= uTransformMatrix;\n        ",end:"\n            if(uRound == 1.)\n            {\n                gl_Position.xy = roundPixels(gl_Position.xy, uResolution);\n            }\n        "},fragment:{header:"\n            uniform float uDistance;\n         ",main:" \n            outColor = vec4(calculateMSDFAlpha(outColor, vColor, uDistance));\n        "}},_={name:"msdf-bit",fragment:{header:"\n            fn calculateMSDFAlpha(msdfColor:vec4<f32>, shapeColor:vec4<f32>, distance:f32) -> f32 {\n                \n                // MSDF\n                var median = msdfColor.r + msdfColor.g + msdfColor.b -\n                    min(msdfColor.r, min(msdfColor.g, msdfColor.b)) -\n                    max(msdfColor.r, max(msdfColor.g, msdfColor.b));\n            \n                // SDF\n                median = min(median, msdfColor.a);\n\n                var screenPxDistance = distance * (median - 0.5);\n                var alpha = clamp(screenPxDistance + 0.5, 0.0, 1.0);\n                if (median < 0.01) {\n                    alpha = 0.0;\n                } else if (median > 0.99) {\n                    alpha = 1.0;\n                }\n\n                // Gamma correction for coverage-like alpha\n                var luma: f32 = dot(shapeColor.rgb, vec3<f32>(0.299, 0.587, 0.114));\n                var gamma: f32 = mix(1.0, 1.0 / 2.2, luma);\n                var coverage: f32 = pow(shapeColor.a * alpha, gamma);\n\n                return coverage;\n             \n            }\n        "}},b={name:"msdf-bit",fragment:{header:"\n            float calculateMSDFAlpha(vec4 msdfColor, vec4 shapeColor, float distance) {\n                \n                // MSDF\n                float median = msdfColor.r + msdfColor.g + msdfColor.b -\n                                min(msdfColor.r, min(msdfColor.g, msdfColor.b)) -\n                                max(msdfColor.r, max(msdfColor.g, msdfColor.b));\n               \n                // SDF\n                median = min(median, msdfColor.a);\n            \n                float screenPxDistance = distance * (median - 0.5);\n                float alpha = clamp(screenPxDistance + 0.5, 0.0, 1.0);\n           \n                if (median < 0.01) {\n                    alpha = 0.0;\n                } else if (median > 0.99) {\n                    alpha = 1.0;\n                }\n\n                // Gamma correction for coverage-like alpha\n                float luma = dot(shapeColor.rgb, vec3(0.299, 0.587, 0.114));\n                float gamma = mix(1.0, 1.0 / 2.2, luma);\n                float coverage = pow(shapeColor.a * alpha, gamma);  \n              \n                return coverage;\n            }\n        "}};let y,x;class T extends g.M{constructor(){const e=new m.k({uColor:{value:new Float32Array([1,1,1,1]),type:"vec4<f32>"},uTransformMatrix:{value:new a.u,type:"mat3x3<f32>"},uDistance:{value:4,type:"f32"},uRound:{value:0,type:"f32"}}),t=(0,h.a)();y??(y=(0,l.v)({name:"sdf-shader",bits:[d.F,(0,u._)(t),f,_,c.b]})),x??(x=(0,l.I)({name:"sdf-shader",bits:[d.a,(0,u.P)(t),v,b,c.m]})),super({glProgram:x,gpuProgram:y,resources:{localUniforms:e,batchSamplers:(0,p.n)(t)}})}}var E=i(1312),w=i(2763);class P{constructor(e){this._gpuBitmapText={},this._destroyRenderableBound=this.destroyRenderable.bind(this),this._renderer=e,this._renderer.renderableGC.addManagedHash(this,"_gpuBitmapText")}validateRenderable(e){const t=this._getGpuBitmapText(e);return e._didTextUpdate&&(e._didTextUpdate=!1,this._updateContext(e,t)),this._renderer.renderPipes.graphics.validateRenderable(t)}addRenderable(e,t){const i=this._getGpuBitmapText(e);S(e,i),e._didTextUpdate&&(e._didTextUpdate=!1,this._updateContext(e,i)),this._renderer.renderPipes.graphics.addRenderable(i,t),i.context.customShader&&this._updateDistanceField(e)}destroyRenderable(e){e.off("destroyed",this._destroyRenderableBound),this._destroyRenderableByUid(e.uid)}_destroyRenderableByUid(e){const t=this._gpuBitmapText[e].context;t.customShader&&(s.Z.return(t.customShader),t.customShader=null),s.Z.return(this._gpuBitmapText[e]),this._gpuBitmapText[e]=null}updateRenderable(e){const t=this._getGpuBitmapText(e);S(e,t),this._renderer.renderPipes.graphics.updateRenderable(t),t.context.customShader&&this._updateDistanceField(e)}_updateContext(e,t){const{context:i}=t,n=E.c.getFont(e.text,e._style);i.clear(),"none"!==n.distanceField.type&&(i.customShader||(i.customShader=s.Z.get(T)));const r=Array.from(e.text),o=e._style;let a=n.baseLineOffset;const h=(0,w.Z)(r,o,n,!0);let l=0;const d=o.padding,u=h.scale;let c=h.width,p=h.height+h.offsetY;o._stroke&&(c+=o._stroke.width/u,p+=o._stroke.width/u),i.translate(-e._anchor._x*c-d,-e._anchor._y*p-d).scale(u,u);const g=n.applyFillAsTint?o._fill.color:16777215;for(let e=0;e<h.lines.length;e++){const t=h.lines[e];for(let e=0;e<t.charPositions.length;e++){const s=r[l++],o=n.chars[s];o?.texture&&i.texture(o.texture,g||"black",Math.round(t.charPositions[e]+o.xOffset),Math.round(a+o.yOffset))}a+=n.lineHeight}}_getGpuBitmapText(e){return this._gpuBitmapText[e.uid]||this.initGpuText(e)}initGpuText(e){const t=s.Z.get(o.A);return this._gpuBitmapText[e.uid]=t,this._updateContext(e,t),e.on("destroyed",this._destroyRenderableBound),this._gpuBitmapText[e.uid]}_updateDistanceField(e){const t=this._getGpuBitmapText(e).context,i=e._style.fontFamily,n=r.l.get(`${i}-bitmap`),{a:s,b:o,c:a,d:h}=e.groupTransform,l=Math.sqrt(s*s+o*o),d=Math.sqrt(a*a+h*h),u=(Math.abs(l)+Math.abs(d))/2,c=n.baseRenderedFontSize/e._style.fontSize,p=u*n.distanceField.range*(1/c);t.customShader.resources.localUniforms.uniforms.uDistance=p}destroy(){for(const e in this._gpuBitmapText)this._destroyRenderableByUid(e);this._gpuBitmapText=null,this._renderer=null}}function S(e,t){t.groupTransform=e.groupTransform,t.groupColorAlpha=e.groupColorAlpha,t.groupColor=e.groupColor,t.groupBlendMode=e.groupBlendMode,t.globalDisplayStatus=e.globalDisplayStatus,t.groupTransform=e.groupTransform,t.localDisplayStatus=e.localDisplayStatus,t.groupAlpha=e.groupAlpha,t._roundPixels=e._roundPixels}P.extension={type:[n.Ag.WebGLPipes,n.Ag.WebGPUPipes,n.Ag.CanvasPipes],name:"bitmapText"},n.XO.add(P)},6958:(e,t,i)=>{var n=i(8507),r=i(8218),s=i(8422),o=i(2289);class a{constructor(e){this._gpuText=Object.create(null),this._destroyRenderableBound=this.destroyRenderable.bind(this),this._renderer=e,this._renderer.runners.resolutionChange.add(this),this._renderer.renderableGC.addManagedHash(this,"_gpuText")}resolutionChange(){for(const e in this._gpuText){const t=this._gpuText[e];if(!t)continue;const i=t.batchableSprite.renderable;i._autoResolution&&(i._resolution=this._renderer.resolution,i.onViewUpdate())}}validateRenderable(e){const t=this._getGpuText(e),i=e._getKey();return t.currentKey!==i}addRenderable(e,t){const i=this._getGpuText(e).batchableSprite;e._didTextUpdate&&this._updateText(e),this._renderer.renderPipes.batch.addToBatch(i,t)}updateRenderable(e){const t=this._getGpuText(e).batchableSprite;e._didTextUpdate&&this._updateText(e),t._batcher.updateElement(t)}destroyRenderable(e){e.off("destroyed",this._destroyRenderableBound),this._destroyRenderableById(e.uid)}_destroyRenderableById(e){const t=this._gpuText[e];this._renderer.canvasText.decreaseReferenceCount(t.currentKey),r.Z.return(t.batchableSprite),this._gpuText[e]=null}_updateText(e){const t=e._getKey(),i=this._getGpuText(e),n=i.batchableSprite;i.currentKey!==t&&this._updateGpuText(e),e._didTextUpdate=!1,(0,o.s)(n,e)}_updateGpuText(e){const t=this._getGpuText(e),i=t.batchableSprite;t.texture&&this._renderer.canvasText.decreaseReferenceCount(t.currentKey),t.texture=i.texture=this._renderer.canvasText.getManagedTexture(e),t.currentKey=e._getKey(),i.texture=t.texture}_getGpuText(e){return this._gpuText[e.uid]||this.initGpuText(e)}initGpuText(e){const t={texture:null,currentKey:"--",batchableSprite:r.Z.get(s.K)};return t.batchableSprite.renderable=e,t.batchableSprite.transform=e.groupTransform,t.batchableSprite.bounds={minX:0,maxX:1,minY:0,maxY:0},t.batchableSprite.roundPixels=this._renderer._roundPixels|e._roundPixels,this._gpuText[e.uid]=t,e._resolution=e._autoResolution?this._renderer.resolution:e.resolution,this._updateText(e),e.on("destroyed",this._destroyRenderableBound),t}destroy(){for(const e in this._gpuText)this._destroyRenderableById(e);this._gpuText=null,this._renderer=null}}a.extension={type:[n.Ag.WebGLPipes,n.Ag.WebGPUPipes,n.Ag.CanvasPipes],name:"text"};var h=i(2577),l=i(9939),d=i(7608),u=i(2437),c=i(9252);function p(e,t,i){for(let n=0,r=4*i*t;n<t;++n,r+=4)if(0!==e[r+3])return!1;return!0}function g(e,t,i,n,r){const s=4*t;for(let t=n,o=n*s+4*i;t<=r;++t,o+=s)if(0!==e[o+3])return!1;return!0}var m=i(4670),f=i(8291),v=i(2558),_=i(4016),b=i(1242),y=i(3548);class x{constructor(e){this._activeTextures={},this._renderer=e}getTextureSize(e,t,i){const n=_.P.measureText(e||" ",i);let r=Math.ceil(Math.ceil(Math.max(1,n.width)+2*i.padding)*t),s=Math.ceil(Math.ceil(Math.max(1,n.height)+2*i.padding)*t);return r=Math.ceil(r-1e-6),s=Math.ceil(s-1e-6),r=(0,l.U5)(r),s=(0,l.U5)(s),{width:r,height:s}}getTexture(e,t,i,n){"string"==typeof e&&((0,m.t6)("8.0.0","CanvasTextSystem.getTexture: Use object TextOptions instead of separate arguments"),e={text:e,style:i,resolution:t}),e.style instanceof f.x||(e.style=new f.x(e.style));const{texture:r,canvasAndContext:s}=this.createTextureAndCanvas(e);return this._renderer.texture.initSource(r._source),d.N.returnCanvasAndContext(s),r}createTextureAndCanvas(e){const{text:t,style:i}=e,n=e.resolution??this._renderer.resolution,r=_.P.measureText(t||" ",i),s=Math.ceil(Math.ceil(Math.max(1,r.width)+2*i.padding)*n),o=Math.ceil(Math.ceil(Math.max(1,r.height)+2*i.padding)*n),a=d.N.getOptimalCanvasAndContext(s,o),{canvas:h}=a;this.renderTextToCanvas(t,i,n,a);const l=(0,v.M)(h,s,o,n);if(i.trim){const e=function(e,t=1){const{width:i,height:n}=e,r=e.getContext("2d",{willReadFrequently:!0});if(null===r)throw new TypeError("Failed to get canvas 2D context");const s=r.getImageData(0,0,i,n).data;let o=0,a=0,h=i-1,l=n-1;for(;a<n&&p(s,i,a);)++a;if(a===n)return c.M.EMPTY;for(;p(s,i,l);)--l;for(;g(s,i,o,a,l);)++o;for(;g(s,i,h,a,l);)--h;return++h,++l,new c.M(o/t,a/t,(h-o)/t,(l-a)/t)}(h,n);l.frame.copyFrom(e),l.updateUvs()}return{texture:l,canvasAndContext:a}}getManagedTexture(e){e._resolution=e._autoResolution?this._renderer.resolution:e.resolution;const t=e._getKey();if(this._activeTextures[t])return this._increaseReferenceCount(t),this._activeTextures[t].texture;const{texture:i,canvasAndContext:n}=this.createTextureAndCanvas(e);return this._activeTextures[t]={canvasAndContext:n,texture:i,usageCount:1},i}_increaseReferenceCount(e){this._activeTextures[e].usageCount++}returnTexture(e){const t=e.source;t.resource=null,t.uploadMethodId="unknown",t.alphaMode="no-premultiply-alpha",u.W.returnTexture(e)}decreaseReferenceCount(e){const t=this._activeTextures[e];t.usageCount--,0===t.usageCount&&(d.N.returnCanvasAndContext(t.canvasAndContext),this.returnTexture(t.texture),this._activeTextures[e]=null)}getReferenceCount(e){return this._activeTextures[e].usageCount}renderTextToCanvas(e,t,i,n){const{canvas:r,context:s}=n,o=(0,b.Z)(t),a=_.P.measureText(e||" ",t),l=a.lines,d=a.lineHeight,u=a.lineWidths,c=a.maxLineWidth,p=a.fontProperties,g=r.height;if(s.resetTransform(),s.scale(i,i),s.textBaseline=t.textBaseline,t._stroke?.width){const e=t._stroke;s.lineWidth=e.width,s.miterLimit=e.miterLimit,s.lineJoin=e.join,s.lineCap=e.cap}let m,f;s.font=o;const v=t.dropShadow?2:1;for(let e=0;e<v;++e){const r=t.dropShadow&&0===e,o=r?Math.ceil(Math.max(1,g)+2*t.padding):0,v=o*i;if(r){s.fillStyle="black",s.strokeStyle="black";const e=t.dropShadow,n=e.color,r=e.alpha;s.shadowColor=h.Q.shared.setValue(n).setAlpha(r).toRgbaString();const o=e.blur*i,a=e.distance*i;s.shadowBlur=o,s.shadowOffsetX=Math.cos(e.angle)*a,s.shadowOffsetY=Math.sin(e.angle)*a+v}else{if(s.fillStyle=t._fill?(0,y.r)(t._fill,s,a):null,t._stroke?.width){const e=t._stroke.width*t._stroke.alignment;s.strokeStyle=(0,y.r)(t._stroke,s,a,e)}s.shadowColor="black"}let _=(d-p.fontSize)/2;d-p.fontSize<0&&(_=0);const b=t._stroke?.width??0;for(let e=0;e<l.length;e++)m=b/2,f=b/2+e*d+p.ascent+_,"right"===t.align?m+=c-u[e]:"center"===t.align&&(m+=(c-u[e])/2),t._stroke?.width&&this._drawLetterSpacing(l[e],t,n,m+t.padding,f+t.padding-o,!0),void 0!==t._fill&&this._drawLetterSpacing(l[e],t,n,m+t.padding,f+t.padding-o)}}_drawLetterSpacing(e,t,i,n,r,s=!1){const{context:o}=i,a=t.letterSpacing;let h=!1;if(_.P.experimentalLetterSpacingSupported&&(_.P.experimentalLetterSpacing?(o.letterSpacing=`${a}px`,o.textLetterSpacing=`${a}px`,h=!0):(o.letterSpacing="0px",o.textLetterSpacing="0px")),0===a||h)return void(s?o.strokeText(e,n,r):o.fillText(e,n,r));let l=n;const d=_.P.graphemeSegmenter(e);let u=o.measureText(e).width,c=0;for(let e=0;e<d.length;++e){const t=d[e];s?o.strokeText(t,l,r):o.fillText(t,l,r);let i="";for(let t=e+1;t<d.length;++t)i+=d[t];c=o.measureText(i).width,l+=u-c+a,u=c}}destroy(){this._activeTextures=null}}x.extension={type:[n.Ag.WebGLSystem,n.Ag.WebGPUSystem,n.Ag.CanvasSystem],name:"canvasText"},n.XO.add(x),n.XO.add(a)},7252:(e,t,i)=>{var n=i(8507),r=i(8218),s=i(8734),o=i(4670),a=i(5060);const h=class e extends a.u{constructor(...e){super({});let t=e[0]??{};"number"==typeof t&&((0,o.t6)(o.lj,"PlaneGeometry constructor changed please use { width, height, verticesX, verticesY } instead"),t={width:t,height:e[1],verticesX:e[2],verticesY:e[3]}),this.build(t)}build(t){t={...e.defaultOptions,...t},this.verticesX=this.verticesX??t.verticesX,this.verticesY=this.verticesY??t.verticesY,this.width=this.width??t.width,this.height=this.height??t.height;const i=this.verticesX*this.verticesY,n=[],r=[],s=[],o=this.verticesX-1,a=this.verticesY-1,h=this.width/o,l=this.height/a;for(let e=0;e<i;e++){const t=e%this.verticesX,i=e/this.verticesX|0;n.push(t*h,i*l),r.push(t/o,i/a)}const d=o*a;for(let e=0;e<d;e++){const t=e%o,i=e/o|0,n=i*this.verticesX+t,r=i*this.verticesX+t+1,a=(i+1)*this.verticesX+t,h=(i+1)*this.verticesX+t+1;s.push(n,r,a,r,h,a)}this.buffers[0].data=new Float32Array(n),this.buffers[1].data=new Float32Array(r),this.indexBuffer.data=new Uint32Array(s),this.buffers[0].update(),this.buffers[1].update(),this.indexBuffer.update()}};h.defaultOptions={width:100,height:100,verticesX:10,verticesY:10};let l=h;const d=class e extends l{constructor(t={}){super({width:(t={...e.defaultOptions,...t}).width,height:t.height,verticesX:4,verticesY:4}),this.update(t)}update(e){this.width=e.width??this.width,this.height=e.height??this.height,this._originalWidth=e.originalWidth??this._originalWidth,this._originalHeight=e.originalHeight??this._originalHeight,this._leftWidth=e.leftWidth??this._leftWidth,this._rightWidth=e.rightWidth??this._rightWidth,this._topHeight=e.topHeight??this._topHeight,this._bottomHeight=e.bottomHeight??this._bottomHeight,this._anchorX=e.anchor?.x,this._anchorY=e.anchor?.y,this.updateUvs(),this.updatePositions()}updatePositions(){const e=this.positions,{width:t,height:i,_leftWidth:n,_rightWidth:r,_topHeight:s,_bottomHeight:o,_anchorX:a,_anchorY:h}=this,l=n+r,d=t>l?1:t/l,u=s+o,c=i>u?1:i/u,p=Math.min(d,c),g=a*t,m=h*i;e[0]=e[8]=e[16]=e[24]=-g,e[2]=e[10]=e[18]=e[26]=n*p-g,e[4]=e[12]=e[20]=e[28]=t-r*p-g,e[6]=e[14]=e[22]=e[30]=t-g,e[1]=e[3]=e[5]=e[7]=-m,e[9]=e[11]=e[13]=e[15]=s*p-m,e[17]=e[19]=e[21]=e[23]=i-o*p-m,e[25]=e[27]=e[29]=e[31]=i-m,this.getBuffer("aPosition").update()}updateUvs(){const e=this.uvs;e[0]=e[8]=e[16]=e[24]=0,e[1]=e[3]=e[5]=e[7]=0,e[6]=e[14]=e[22]=e[30]=1,e[25]=e[27]=e[29]=e[31]=1;const t=1/this._originalWidth,i=1/this._originalHeight;e[2]=e[10]=e[18]=e[26]=t*this._leftWidth,e[9]=e[11]=e[13]=e[15]=i*this._topHeight,e[4]=e[12]=e[20]=e[28]=1-t*this._rightWidth,e[17]=e[19]=e[21]=e[23]=1-i*this._bottomHeight,this.getBuffer("aUV").update()}};d.defaultOptions={width:100,height:100,leftWidth:10,topHeight:10,rightWidth:10,bottomHeight:10,originalWidth:100,originalHeight:100};let u=d;class c{constructor(e){this._gpuSpriteHash=Object.create(null),this._destroyRenderableBound=this.destroyRenderable.bind(this),this._renderer=e,this._renderer.renderableGC.addManagedHash(this,"_gpuSpriteHash")}addRenderable(e,t){const i=this._getGpuSprite(e);e.didViewUpdate&&this._updateBatchableSprite(e,i),this._renderer.renderPipes.batch.addToBatch(i,t)}updateRenderable(e){const t=this._gpuSpriteHash[e.uid];e.didViewUpdate&&this._updateBatchableSprite(e,t),t._batcher.updateElement(t)}validateRenderable(e){const t=this._getGpuSprite(e);return!t._batcher.checkAndUpdateTexture(t,e._texture)}destroyRenderable(e){const t=this._gpuSpriteHash[e.uid];r.Z.return(t.geometry),r.Z.return(t),this._gpuSpriteHash[e.uid]=null,e.off("destroyed",this._destroyRenderableBound)}_updateBatchableSprite(e,t){t.geometry.update(e),t.setTexture(e._texture)}_getGpuSprite(e){return this._gpuSpriteHash[e.uid]||this._initGPUSprite(e)}_initGPUSprite(e){const t=r.Z.get(s.U);return t.geometry=r.Z.get(u),t.renderable=e,t.transform=e.groupTransform,t.texture=e._texture,t.roundPixels=this._renderer._roundPixels|e._roundPixels,this._gpuSpriteHash[e.uid]=t,e.didViewUpdate||this._updateBatchableSprite(e,t),e.on("destroyed",this._destroyRenderableBound),t}destroy(){for(const e in this._gpuSpriteHash)this._gpuSpriteHash[e].geometry.destroy();this._gpuSpriteHash=null,this._renderer=null}}c.extension={type:[n.Ag.WebGLPipes,n.Ag.WebGPUPipes,n.Ag.CanvasPipes],name:"nineSliceSprite"},n.XO.add(c)},7547:(e,t,i)=>{i.d(t,{U:()=>s});const n={normal:0,add:1,multiply:2,screen:3,overlay:4,erase:5,"normal-npm":6,"add-npm":7,"screen-npm":8,min:9,max:10},r=class e{constructor(){this.data=0,this.blendMode="normal",this.polygonOffset=0,this.blend=!0,this.depthMask=!0}get blend(){return!!(1&this.data)}set blend(e){!!(1&this.data)!==e&&(this.data^=1)}get offsets(){return!!(2&this.data)}set offsets(e){!!(2&this.data)!==e&&(this.data^=2)}set cullMode(e){"none"!==e?(this.culling=!0,this.clockwiseFrontFace="front"===e):this.culling=!1}get cullMode(){return this.culling?this.clockwiseFrontFace?"front":"back":"none"}get culling(){return!!(4&this.data)}set culling(e){!!(4&this.data)!==e&&(this.data^=4)}get depthTest(){return!!(8&this.data)}set depthTest(e){!!(8&this.data)!==e&&(this.data^=8)}get depthMask(){return!!(32&this.data)}set depthMask(e){!!(32&this.data)!==e&&(this.data^=32)}get clockwiseFrontFace(){return!!(16&this.data)}set clockwiseFrontFace(e){!!(16&this.data)!==e&&(this.data^=16)}get blendMode(){return this._blendMode}set blendMode(e){this.blend="none"!==e,this._blendMode=e,this._blendModeId=n[e]||0}get polygonOffset(){return this._polygonOffset}set polygonOffset(e){this.offsets=!!e,this._polygonOffset=e}toString(){return`[pixi.js/core:State blendMode=${this.blendMode} clockwiseFrontFace=${this.clockwiseFrontFace} culling=${this.culling} depthMask=${this.depthMask} polygonOffset=${this.polygonOffset}]`}static for2d(){const t=new e;return t.depthTest=!1,t.blend=!0,t}};r.default2d=r.for2d();let s=r},8422:(e,t,i)=>{i.d(t,{K:()=>n});class n{constructor(){this.batcherName="default",this.topology="triangle-list",this.attributeSize=4,this.indexSize=6,this.packAsQuad=!0,this.roundPixels=0,this._attributeStart=0,this._batcher=null,this._batch=null}get blendMode(){return this.renderable.groupBlendMode}get color(){return this.renderable.groupColorAlpha}reset(){this.renderable=null,this.texture=null,this._batcher=null,this._batch=null,this.bounds=null}}},8723:(e,t,i)=>{var n=i(8507),r=i(8639),s=i(7547),o=i(5099),a=i(2760),h=i(8734),l=i(5060),d=i(9313),u=i(5611),c=i(2067),p=i(6665),g=i(8475),m=i(5811),f=i(4492);const v={name:"tiling-bit",vertex:{header:"\n            struct TilingUniforms {\n                uMapCoord:mat3x3<f32>,\n                uClampFrame:vec4<f32>,\n                uClampOffset:vec2<f32>,\n                uTextureTransform:mat3x3<f32>,\n                uSizeAnchor:vec4<f32>\n            };\n\n            @group(2) @binding(0) var<uniform> tilingUniforms: TilingUniforms;\n            @group(2) @binding(1) var uTexture: texture_2d<f32>;\n            @group(2) @binding(2) var uSampler: sampler;\n        ",main:"\n            uv = (tilingUniforms.uTextureTransform * vec3(uv, 1.0)).xy;\n\n            position = (position - tilingUniforms.uSizeAnchor.zw) * tilingUniforms.uSizeAnchor.xy;\n        "},fragment:{header:"\n            struct TilingUniforms {\n                uMapCoord:mat3x3<f32>,\n                uClampFrame:vec4<f32>,\n                uClampOffset:vec2<f32>,\n                uTextureTransform:mat3x3<f32>,\n                uSizeAnchor:vec4<f32>\n            };\n\n            @group(2) @binding(0) var<uniform> tilingUniforms: TilingUniforms;\n            @group(2) @binding(1) var uTexture: texture_2d<f32>;\n            @group(2) @binding(2) var uSampler: sampler;\n        ",main:"\n\n            var coord = vUV + ceil(tilingUniforms.uClampOffset - vUV);\n            coord = (tilingUniforms.uMapCoord * vec3(coord, 1.0)).xy;\n            var unclamped = coord;\n            coord = clamp(coord, tilingUniforms.uClampFrame.xy, tilingUniforms.uClampFrame.zw);\n\n            var bias = 0.;\n\n            if(unclamped.x == coord.x && unclamped.y == coord.y)\n            {\n                bias = -32.;\n            } \n\n            outColor = textureSampleBias(uTexture, uSampler, coord, bias);\n        "}},_={name:"tiling-bit",vertex:{header:"\n            uniform mat3 uTextureTransform;\n            uniform vec4 uSizeAnchor;\n        \n        ",main:"\n            uv = (uTextureTransform * vec3(aUV, 1.0)).xy;\n\n            position = (position - uSizeAnchor.zw) * uSizeAnchor.xy;\n        "},fragment:{header:"\n            uniform sampler2D uTexture;\n            uniform mat3 uMapCoord;\n            uniform vec4 uClampFrame;\n            uniform vec2 uClampOffset;\n        ",main:"\n\n        vec2 coord = vUV + ceil(uClampOffset - vUV);\n        coord = (uMapCoord * vec3(coord, 1.0)).xy;\n        vec2 unclamped = coord;\n        coord = clamp(coord, uClampFrame.xy, uClampFrame.zw);\n        \n        outColor = texture(uTexture, coord, unclamped == coord ? 0.0 : -32.0);// lod-bias very negative to force lod 0\n    \n        "}};let b,y;class x extends g.M{constructor(){b??(b=(0,u.v)({name:"tiling-sprite-shader",bits:[c.Ls,v,p.b]})),y??(y=(0,u.I)({name:"tiling-sprite-shader",bits:[c.mA,_,p.m]}));const e=new m.k({uMapCoord:{value:new d.u,type:"mat3x3<f32>"},uClampFrame:{value:new Float32Array([0,0,1,1]),type:"vec4<f32>"},uClampOffset:{value:new Float32Array([0,0]),type:"vec2<f32>"},uTextureTransform:{value:new d.u,type:"mat3x3<f32>"},uSizeAnchor:{value:new Float32Array([100,100,.5,.5]),type:"vec4<f32>"}});super({glProgram:y,gpuProgram:b,resources:{localUniforms:new m.k({uTransformMatrix:{value:new d.u,type:"mat3x3<f32>"},uColor:{value:new Float32Array([1,1,1,1]),type:"vec4<f32>"},uRound:{value:0,type:"f32"}}),tilingUniforms:e,uTexture:f.g.EMPTY.source,uSampler:f.g.EMPTY.source.style}})}updateUniforms(e,t,i,n,r,s){const o=this.resources.tilingUniforms,a=s.width,h=s.height,l=s.textureMatrix,d=o.uniforms.uTextureTransform;d.set(i.a*a/e,i.b*a/t,i.c*h/e,i.d*h/t,i.tx/e,i.ty/t),d.invert(),o.uniforms.uMapCoord=l.mapCoord,o.uniforms.uClampFrame=l.uClampFrame,o.uniforms.uClampOffset=l.uClampOffset,o.uniforms.uTextureTransform=d,o.uniforms.uSizeAnchor[0]=e,o.uniforms.uSizeAnchor[1]=t,o.uniforms.uSizeAnchor[2]=n,o.uniforms.uSizeAnchor[3]=r,s&&(this.resources.uTexture=s.source,this.resources.uSampler=s.source.style)}}class T extends l.u{constructor(){super({positions:new Float32Array([0,0,1,0,1,1,0,1]),uvs:new Float32Array([0,0,1,0,1,1,0,1]),indices:new Uint32Array([0,1,2,0,2,3])})}}const E=new T;class w{constructor(e){this._state=s.U.default2d,this._tilingSpriteDataHash=Object.create(null),this._destroyRenderableBound=this.destroyRenderable.bind(this),this._renderer=e,this._renderer.renderableGC.addManagedHash(this,"_tilingSpriteDataHash")}validateRenderable(e){const t=this._getTilingSpriteData(e),i=t.canBatch;this._updateCanBatch(e);const n=t.canBatch;if(n&&n===i){const{batchableMesh:i}=t;return!i._batcher.checkAndUpdateTexture(i,e.texture)}return i!==n}addRenderable(e,t){const i=this._renderer.renderPipes.batch;this._updateCanBatch(e);const n=this._getTilingSpriteData(e),{geometry:r,canBatch:s}=n;if(s){n.batchableMesh||(n.batchableMesh=new h.U);const s=n.batchableMesh;e.didViewUpdate&&(this._updateBatchableMesh(e),s.geometry=r,s.renderable=e,s.transform=e.groupTransform,s.setTexture(e._texture)),s.roundPixels=this._renderer._roundPixels|e._roundPixels,i.addToBatch(s,t)}else i.break(t),n.shader||(n.shader=new x),this.updateRenderable(e),t.add(e)}execute(e){const{shader:t}=this._tilingSpriteDataHash[e.uid];t.groups[0]=this._renderer.globalUniforms.bindGroup;const i=t.resources.localUniforms.uniforms;i.uTransformMatrix=e.groupTransform,i.uRound=this._renderer._roundPixels|e._roundPixels,(0,a.V)(e.groupColorAlpha,i.uColor,0),this._state.blendMode=(0,r.i)(e.groupBlendMode,e.texture._source),this._renderer.encoder.draw({geometry:E,shader:t,state:this._state})}updateRenderable(e){const t=this._getTilingSpriteData(e),{canBatch:i}=t;if(i){const{batchableMesh:i}=t;e.didViewUpdate&&this._updateBatchableMesh(e),i._batcher.updateElement(i)}else if(e.didViewUpdate){const{shader:i}=t;i.updateUniforms(e.width,e.height,e._tileTransform.matrix,e.anchor.x,e.anchor.y,e.texture)}}destroyRenderable(e){const t=this._getTilingSpriteData(e);t.batchableMesh=null,t.shader?.destroy(),this._tilingSpriteDataHash[e.uid]=null,e.off("destroyed",this._destroyRenderableBound)}_getTilingSpriteData(e){return this._tilingSpriteDataHash[e.uid]||this._initTilingSpriteData(e)}_initTilingSpriteData(e){const t=new l.u({indices:E.indices,positions:E.positions.slice(),uvs:E.uvs.slice()});return this._tilingSpriteDataHash[e.uid]={canBatch:!0,renderable:e,geometry:t},e.on("destroyed",this._destroyRenderableBound),this._tilingSpriteDataHash[e.uid]}_updateBatchableMesh(e){const t=this._getTilingSpriteData(e),{geometry:i}=t,n=e.texture.source.style;"repeat"!==n.addressMode&&(n.addressMode="repeat",n.update()),function(e,t){const i=e.texture,n=i.frame.width,r=i.frame.height;let s=0,o=0;e.applyAnchorToTexture&&(s=e.anchor.x,o=e.anchor.y),t[0]=t[6]=-s,t[2]=t[4]=1-s,t[1]=t[3]=-o,t[5]=t[7]=1-o;const a=d.u.shared;a.copyFrom(e._tileTransform.matrix),a.tx/=e.width,a.ty/=e.height,a.invert(),a.scale(e.width/n,e.height/r),function(e,t,i,n){let r=0;const s=e.length/2,o=n.a,a=n.b,h=n.c,l=n.d,d=n.tx,u=n.ty;for(i*=2;r<s;){const t=e[i],n=e[i+1];e[i]=o*t+h*n+d,e[i+1]=a*t+l*n+u,i+=2,r++}}(t,0,0,a)}(e,i.uvs),function(e,t){const i=e.anchor.x,n=e.anchor.y;t[0]=-i*e.width,t[1]=-n*e.height,t[2]=(1-i)*e.width,t[3]=-n*e.height,t[4]=(1-i)*e.width,t[5]=(1-n)*e.height,t[6]=-i*e.width,t[7]=(1-n)*e.height}(e,i.positions)}destroy(){for(const e in this._tilingSpriteDataHash)this.destroyRenderable(this._tilingSpriteDataHash[e].renderable);this._tilingSpriteDataHash=null,this._renderer=null}_updateCanBatch(e){const t=this._getTilingSpriteData(e),i=e.texture;let n=!0;return this._renderer.type===o.W.WEBGL&&(n=this._renderer.context.supports.nonPowOf2wrapping),t.canBatch=i.textureMatrix.isSimple&&(n||i.source.isPowerOfTwo),t.canBatch}}w.extension={type:[n.Ag.WebGLPipes,n.Ag.WebGPUPipes,n.Ag.CanvasPipes],name:"tilingSprite"},n.XO.add(w)},8734:(e,t,i)=>{i.d(t,{U:()=>n});class n{constructor(){this.batcherName="default",this.packAsQuad=!1,this.indexOffset=0,this.attributeOffset=0,this.roundPixels=0,this._batcher=null,this._batch=null,this._textureMatrixUpdateId=-1,this._uvUpdateId=-1}get blendMode(){return this.renderable.groupBlendMode}get topology(){return this._topology||this.geometry.topology}set topology(e){this._topology=e}reset(){this.renderable=null,this.texture=null,this._batcher=null,this._batch=null,this.geometry=null,this._uvUpdateId=-1,this._textureMatrixUpdateId=-1}setTexture(e){this.texture!==e&&(this.texture=e,this._textureMatrixUpdateId=-1)}get uvs(){const e=this.geometry.getBuffer("aUV"),t=e.data;let i=t;const n=this.texture.textureMatrix;return n.isSimple||(i=this._transformedUvs,this._textureMatrixUpdateId===n._updateID&&this._uvUpdateId===e._updateID||((!i||i.length<t.length)&&(i=this._transformedUvs=new Float32Array(t.length)),this._textureMatrixUpdateId=n._updateID,this._uvUpdateId=e._updateID,n.multiplyUvs(t,i))),i}get positions(){return this.geometry.positions}get indices(){return this.geometry.indices}get color(){return this.renderable.groupColorAlpha}get groupTransform(){return this.renderable.groupTransform}get attributeSize(){return this.geometry.positions.length/2}get indexSize(){return this.geometry.indices.length}}},8928:(e,t,i)=>{var n=i(8507),r=i(2460),s=i(7547),o=i(8218),a=i(2760),h=i(6954);class l{constructor(e,t){this.state=s.U.for2d(),this._graphicsBatchesHash=Object.create(null),this._destroyRenderableBound=this.destroyRenderable.bind(this),this.renderer=e,this._adaptor=t,this._adaptor.init(),this.renderer.renderableGC.addManagedHash(this,"_graphicsBatchesHash")}validateRenderable(e){const t=e.context,i=!!this._graphicsBatchesHash[e.uid],n=this.renderer.graphicsContext.updateGpuContext(t);return!(!n.isBatchable&&i===n.isBatchable)}addRenderable(e,t){const i=this.renderer.graphicsContext.updateGpuContext(e.context);e.didViewUpdate&&this._rebuild(e),i.isBatchable?this._addToBatcher(e,t):(this.renderer.renderPipes.batch.break(t),t.add(e))}updateRenderable(e){const t=this._graphicsBatchesHash[e.uid];if(t)for(let e=0;e<t.length;e++){const i=t[e];i._batcher.updateElement(i)}}destroyRenderable(e){this._graphicsBatchesHash[e.uid]&&this._removeBatchForRenderable(e.uid),e.off("destroyed",this._destroyRenderableBound)}execute(e){if(!e.isRenderable)return;const t=this.renderer,i=e.context;if(!t.graphicsContext.getGpuContext(i).batches.length)return;const n=i.customShader||this._adaptor.shader;this.state.blendMode=e.groupBlendMode;const r=n.resources.localUniforms.uniforms;r.uTransformMatrix=e.groupTransform,r.uRound=t._roundPixels|e._roundPixels,(0,a.V)(e.groupColorAlpha,r.uColor,0),this._adaptor.execute(this,e)}_rebuild(e){const t=!!this._graphicsBatchesHash[e.uid],i=this.renderer.graphicsContext.updateGpuContext(e.context);t&&this._removeBatchForRenderable(e.uid),i.isBatchable&&this._initBatchesForRenderable(e),e.batched=i.isBatchable}_addToBatcher(e,t){const i=this.renderer.renderPipes.batch,n=this._getBatchesForRenderable(e);for(let e=0;e<n.length;e++){const r=n[e];i.addToBatch(r,t)}}_getBatchesForRenderable(e){return this._graphicsBatchesHash[e.uid]||this._initBatchesForRenderable(e)}_initBatchesForRenderable(e){const t=e.context,i=this.renderer.graphicsContext.getGpuContext(t),n=this.renderer._roundPixels|e._roundPixels,r=i.batches.map((t=>{const i=o.Z.get(h.G);return t.copyTo(i),i.renderable=e,i.roundPixels=n,i}));return void 0===this._graphicsBatchesHash[e.uid]&&e.on("destroyed",this._destroyRenderableBound),this._graphicsBatchesHash[e.uid]=r,r}_removeBatchForRenderable(e){this._graphicsBatchesHash[e].forEach((e=>{o.Z.return(e)})),this._graphicsBatchesHash[e]=null}destroy(){this.renderer=null,this._adaptor.destroy(),this._adaptor=null,this.state=null;for(const e in this._graphicsBatchesHash)this._removeBatchForRenderable(e);this._graphicsBatchesHash=null}}l.extension={type:[n.Ag.WebGLPipes,n.Ag.WebGPUPipes,n.Ag.CanvasPipes],name:"graphics"},n.XO.add(l),n.XO.add(r.GH)},9147:(e,t,i)=>{var n=i(8507),r=i(4492),s=i(8218),o=i(8422),a=i(2289);class h{constructor(e){this._gpuText=Object.create(null),this._destroyRenderableBound=this.destroyRenderable.bind(this),this._renderer=e,this._renderer.runners.resolutionChange.add(this),this._renderer.renderableGC.addManagedHash(this,"_gpuText")}resolutionChange(){for(const e in this._gpuText){const t=this._gpuText[e];if(!t)continue;const i=t.batchableSprite.renderable;i._autoResolution&&(i._resolution=this._renderer.resolution,i.onViewUpdate())}}validateRenderable(e){const t=this._getGpuText(e),i=e._getKey();return t.textureNeedsUploading?(t.textureNeedsUploading=!1,!0):t.currentKey!==i}addRenderable(e,t){const i=this._getGpuText(e).batchableSprite;e._didTextUpdate&&this._updateText(e),this._renderer.renderPipes.batch.addToBatch(i,t)}updateRenderable(e){const t=this._getGpuText(e).batchableSprite;e._didTextUpdate&&this._updateText(e),t._batcher.updateElement(t)}destroyRenderable(e){e.off("destroyed",this._destroyRenderableBound),this._destroyRenderableById(e.uid)}_destroyRenderableById(e){const t=this._gpuText[e];this._renderer.htmlText.decreaseReferenceCount(t.currentKey),s.Z.return(t.batchableSprite),this._gpuText[e]=null}_updateText(e){const t=e._getKey(),i=this._getGpuText(e),n=i.batchableSprite;i.currentKey!==t&&this._updateGpuText(e).catch((e=>{console.error(e)})),e._didTextUpdate=!1,(0,a.s)(n,e)}async _updateGpuText(e){e._didTextUpdate=!1;const t=this._getGpuText(e);if(t.generatingTexture)return;const i=e._getKey();this._renderer.htmlText.decreaseReferenceCount(t.currentKey),t.generatingTexture=!0,t.currentKey=i;const n=e.resolution??this._renderer.resolution,r=await this._renderer.htmlText.getManagedTexture(e.text,n,e._style,e._getKey()),s=t.batchableSprite;s.texture=t.texture=r,t.generatingTexture=!1,t.textureNeedsUploading=!0,e.onViewUpdate(),(0,a.s)(s,e)}_getGpuText(e){return this._gpuText[e.uid]||this.initGpuText(e)}initGpuText(e){const t={texture:r.g.EMPTY,currentKey:"--",batchableSprite:s.Z.get(o.K),textureNeedsUploading:!1,generatingTexture:!1},i=t.batchableSprite;return i.renderable=e,i.transform=e.groupTransform,i.texture=r.g.EMPTY,i.bounds={minX:0,maxX:1,minY:0,maxY:0},i.roundPixels=this._renderer._roundPixels|e._roundPixels,e._resolution=e._autoResolution?this._renderer.resolution:e.resolution,this._gpuText[e.uid]=t,e.on("destroyed",this._destroyRenderableBound),t}destroy(){for(const e in this._gpuText)this._destroyRenderableById(e);this._gpuText=null,this._renderer=null}}h.extension={type:[n.Ag.WebGLPipes,n.Ag.WebGPUPipes,n.Ag.CanvasPipes],name:"htmlText"};var l=i(7608),d=i(2437),u=i(5099),c=i(1761),p=i(268),g=i(2558);const m="http://www.w3.org/2000/svg",f="http://www.w3.org/1999/xhtml";class v{constructor(){this.svgRoot=document.createElementNS(m,"svg"),this.foreignObject=document.createElementNS(m,"foreignObject"),this.domElement=document.createElementNS(f,"div"),this.styleElement=document.createElementNS(f,"style"),this.image=new Image;const{foreignObject:e,svgRoot:t,styleElement:i,domElement:n}=this;e.setAttribute("width","10000"),e.setAttribute("height","10000"),e.style.overflow="hidden",t.appendChild(e),e.appendChild(i),e.appendChild(n)}}var _=i(8291),b=i(8011),y=i(2577);function x(e){const t=y.Q.shared.setValue(e.color).setAlpha(e.alpha).toHexa(),i=`${Math.round(Math.cos(e.angle)*e.distance)}px ${Math.round(Math.sin(e.angle)*e.distance)}px`;return e.blur>0?`text-shadow: ${i} ${e.blur}px ${t}`:`text-shadow: ${i} ${t}`}function T(e){return[`-webkit-text-stroke-width: ${e.width}px`,`-webkit-text-stroke-color: ${y.Q.shared.setValue(e.color).toHex()}`,`text-stroke-width: ${e.width}px`,`text-stroke-color: ${y.Q.shared.setValue(e.color).toHex()}`,"paint-order: stroke"].join(";")}const E={fontSize:"font-size: {{VALUE}}px",fontFamily:"font-family: {{VALUE}}",fontWeight:"font-weight: {{VALUE}}",fontStyle:"font-style: {{VALUE}}",fontVariant:"font-variant: {{VALUE}}",letterSpacing:"letter-spacing: {{VALUE}}px",align:"text-align: {{VALUE}}",padding:"padding: {{VALUE}}px",whiteSpace:"white-space: {{VALUE}}",lineHeight:"line-height: {{VALUE}}px",wordWrapWidth:"max-width: {{VALUE}}px"},w={fill:e=>`color: ${y.Q.shared.setValue(e).toHex()}`,breakWords:e=>"word-wrap: "+(e?"break-all":"break-word"),stroke:T,dropShadow:x};class P extends _.x{constructor(e={}){super(e),this._cssOverrides=[],this.cssOverrides??(this.cssOverrides=e.cssOverrides),this.tagStyles=e.tagStyles??{}}set cssOverrides(e){this._cssOverrides=e instanceof Array?e:[e],this.update()}get cssOverrides(){return this._cssOverrides}_generateKey(){return this._styleKey=(0,b.V)(this)+this._cssOverrides.join("-"),this._styleKey}update(){this._cssStyle=null,super.update()}clone(){return new P({align:this.align,breakWords:this.breakWords,dropShadow:this.dropShadow?{...this.dropShadow}:null,fill:this._fill,fontFamily:this.fontFamily,fontSize:this.fontSize,fontStyle:this.fontStyle,fontVariant:this.fontVariant,fontWeight:this.fontWeight,letterSpacing:this.letterSpacing,lineHeight:this.lineHeight,padding:this.padding,stroke:this._stroke,whiteSpace:this.whiteSpace,wordWrap:this.wordWrap,wordWrapWidth:this.wordWrapWidth,cssOverrides:this.cssOverrides})}get cssStyle(){return this._cssStyle||(this._cssStyle=function(e){const t=e._stroke,i=e._fill,n=[`div { ${[`color: ${y.Q.shared.setValue(i.color).toHex()}`,`font-size: ${e.fontSize}px`,`font-family: ${e.fontFamily}`,`font-weight: ${e.fontWeight}`,`font-style: ${e.fontStyle}`,`font-variant: ${e.fontVariant}`,`letter-spacing: ${e.letterSpacing}px`,`text-align: ${e.align}`,`padding: ${e.padding}px`,`white-space: ${"pre"===e.whiteSpace&&e.wordWrap?"pre-wrap":e.whiteSpace}`,...e.lineHeight?[`line-height: ${e.lineHeight}px`]:[],...e.wordWrap?["word-wrap: "+(e.breakWords?"break-all":"break-word"),`max-width: ${e.wordWrapWidth}px`]:[],...t?[T(t)]:[],...e.dropShadow?[x(e.dropShadow)]:[],...e.cssOverrides].join(";")} }`];return function(e,t){for(const i in e){const n=e[i],r=[];for(const e in n)w[e]?r.push(w[e](n[e])):E[e]&&r.push(E[e].replace("{{VALUE}}",n[e]));t.push(`${i} { ${r.join(";")} }`)}}(e.tagStyles,n),n.join(" ")}(this)),this._cssStyle}addOverride(...e){const t=e.filter((e=>!this.cssOverrides.includes(e)));t.length>0&&(this.cssOverrides.push(...t),this.update())}removeOverride(...e){const t=e.filter((e=>this.cssOverrides.includes(e)));t.length>0&&(this.cssOverrides=this.cssOverrides.filter((e=>!t.includes(e))),this.update())}set fill(e){"string"!=typeof e&&"number"!=typeof e&&(0,p.R)("[HTMLTextStyle] only color fill is not supported by HTMLText"),super.fill=e}set stroke(e){e&&"string"!=typeof e&&"number"!=typeof e&&(0,p.R)("[HTMLTextStyle] only color stroke is not supported by HTMLText"),super.stroke=e}}var S=i(1979);async function M(e,t){const i=await async function(e){const t=await c.e.get().fetch(e),i=await t.blob(),n=new FileReader;return await new Promise(((e,t)=>{n.onloadend=()=>e(n.result),n.onerror=t,n.readAsDataURL(i)}))}(t);return`@font-face {\n        font-family: "${e.fontFamily}";\n        src: url('${i}');\n        font-weight: ${e.fontWeight};\n        font-style: ${e.fontStyle};\n    }`}const A=new Map;let C;class B{constructor(e){this._activeTextures={},this._renderer=e,this._createCanvas=e.type===u.W.WEBGPU}getTexture(e){return this._buildTexturePromise(e.text,e.resolution,e.style)}getManagedTexture(e,t,i,n){if(this._activeTextures[n])return this._increaseReferenceCount(n),this._activeTextures[n].promise;const r=this._buildTexturePromise(e,t,i).then((e=>(this._activeTextures[n].texture=e,e)));return this._activeTextures[n]={texture:null,promise:r,usageCount:1},r}async _buildTexturePromise(e,t,i){const n=s.Z.get(v),r=function(e,t){const i=t.fontFamily,n=[],r={},s=e.match(/font-family:([^;"\s]+)/g);function o(e){r[e]||(n.push(e),r[e]=!0)}if(Array.isArray(i))for(let e=0;e<i.length;e++)o(i[e]);else o(i);s&&s.forEach((e=>{o(e.split(":")[1].trim())}));for(const e in t.tagStyles)o(t.tagStyles[e].fontFamily);return n}(e,i),o=await async function(e,t,i){const n=e.filter((e=>S.l.has(`${e}-and-url`))).map(((e,n)=>{if(!A.has(e)){const{url:r}=S.l.get(`${e}-and-url`);0===n?A.set(e,M({fontWeight:t.fontWeight,fontStyle:t.fontStyle,fontFamily:e},r)):A.set(e,M({fontWeight:i.fontWeight,fontStyle:i.fontStyle,fontFamily:e},r))}return A.get(e)}));return(await Promise.all(n)).join("\n")}(r,i,P.defaultTextStyle),a=function(e,t,i,n){n||(n=C||(C=new v));const{domElement:r,styleElement:s,svgRoot:o}=n;r.innerHTML=`<style>${t.cssStyle};</style><div style='padding:0'>${e}</div>`,r.setAttribute("style","transform-origin: top left; display: inline-block"),i&&(s.textContent=i),document.body.appendChild(o);const a=r.getBoundingClientRect();o.remove();const h=2*t.padding;return{width:a.width-h,height:a.height-h}}(e,i,o,n),h=Math.ceil(Math.ceil(Math.max(1,a.width)+2*i.padding)*t),d=Math.ceil(Math.ceil(Math.max(1,a.height)+2*i.padding)*t),u=n.image;u.width=2+(0|h),u.height=2+(0|d);const p=function(e,t,i,n,r){const{domElement:s,styleElement:o,svgRoot:a}=r;s.innerHTML=`<style>${t.cssStyle}</style><div style='padding:0;'>${e}</div>`,s.setAttribute("style",`transform: scale(${i});transform-origin: top left; display: inline-block`),o.textContent=n;const{width:h,height:l}=r.image;return a.setAttribute("width",h.toString()),a.setAttribute("height",l.toString()),(new XMLSerializer).serializeToString(a)}(e,i,t,o,n);await function(e,t,i){return new Promise((async n=>{i&&await new Promise((e=>setTimeout(e,100))),e.onload=()=>{n()},e.src=`data:image/svg+xml;charset=utf8,${encodeURIComponent(t)}`,e.crossOrigin="anonymous"}))}(u,p,function(){const{userAgent:e}=c.e.get().getNavigator();return/^((?!chrome|android).)*safari/i.test(e)}()&&r.length>0);const m=u;let f;this._createCanvas&&(f=function(e,t){const i=l.N.getOptimalCanvasAndContext(e.width,e.height,t),{context:n}=i;return n.clearRect(0,0,e.width,e.height),n.drawImage(e,0,0),i}(u,t));const _=(0,g.M)(f?f.canvas:m,u.width-2,u.height-2,t);return this._createCanvas&&(this._renderer.texture.initSource(_.source),l.N.returnCanvasAndContext(f)),s.Z.return(n),_}_increaseReferenceCount(e){this._activeTextures[e].usageCount++}decreaseReferenceCount(e){const t=this._activeTextures[e];t&&(t.usageCount--,0===t.usageCount&&(t.texture?this._cleanUp(t):t.promise.then((e=>{t.texture=e,this._cleanUp(t)})).catch((()=>{(0,p.R)("HTMLTextSystem: Failed to clean texture")})),this._activeTextures[e]=null))}_cleanUp(e){d.W.returnTexture(e.texture),e.texture.source.resource=null,e.texture.source.uploadMethodId="unknown"}getReferenceCount(e){return this._activeTextures[e].usageCount}destroy(){this._activeTextures=null}}B.extension={type:[n.Ag.WebGLSystem,n.Ag.WebGPUSystem,n.Ag.CanvasSystem],name:"htmlText"},B.defaultFontOptions={fontFamily:"Arial",fontStyle:"normal",fontWeight:"normal"},n.XO.add(B),n.XO.add(h)},9305:(e,t,i)=>{var n=i(8507);class r{execute(e,t){const i=e.state,n=e.renderer,r=t.shader||e.defaultShader;r.resources.uTexture=t.texture._source,r.resources.uniforms=e.localUniforms;const s=n.gl,o=e.getBuffers(t);n.shader.bind(r),n.state.set(i),n.geometry.bind(o.geometry,r.glProgram);const a=2===o.geometry.indexBuffer.data.BYTES_PER_ELEMENT?s.UNSIGNED_SHORT:s.UNSIGNED_INT;s.drawElements(s.TRIANGLES,6*t.particleChildren.length,a,0)}}var s=i(9313),o=i(5811),a=i(8639),h=i(7547),l=i(2760),d=i(949),u=i(1132),c=i(6011),p=i(8306),g=i(1460);function m(e,t=null){const i=6*e;if(i>65535?t||(t=new Uint32Array(i)):t||(t=new Uint16Array(i)),t.length!==i)throw new Error(`Out buffer length is incorrect, got ${t.length} and expected ${i}`);for(let e=0,n=0;e<i;e+=6,n+=4)t[e+0]=n+0,t[e+1]=n+1,t[e+2]=n+2,t[e+3]=n+0,t[e+4]=n+2,t[e+5]=n+3;return t}function f(e,t){const i=[];i.push("\n      \n        var index = 0;\n\n        for (let i = 0; i < ps.length; ++i)\n        {\n            const p = ps[i];\n\n            ");let n=0;for(const r in e){const s=e[r];t===s.dynamic&&(i.push(`offset = index + ${n}`),i.push(s.code),n+=(0,p.m)(s.format).stride/4)}i.push("\n            index += stride * 4;\n        }\n    "),i.unshift(`\n        var stride = ${n};\n    `);const r=i.join("\n");return new Function("ps","f32v","u32v",r)}class v{constructor(e){this._size=0,this._generateParticleUpdateCache={};const t=this._size=e.size??1e3,i=e.properties;let n=0,r=0;for(const e in i){const t=i[e],s=(0,p.m)(t.format);t.dynamic?r+=s.stride:n+=s.stride}this._dynamicStride=r/4,this._staticStride=n/4,this.staticAttributeBuffer=new g.u(4*t*n),this.dynamicAttributeBuffer=new g.u(4*t*r),this.indexBuffer=m(t);const s=new c.V;let o=0,a=0;this._staticBuffer=new d.h({data:new Float32Array(1),label:"static-particle-buffer",shrinkToFit:!1,usage:u.S.VERTEX|u.S.COPY_DST}),this._dynamicBuffer=new d.h({data:new Float32Array(1),label:"dynamic-particle-buffer",shrinkToFit:!1,usage:u.S.VERTEX|u.S.COPY_DST});for(const e in i){const t=i[e],n=(0,p.m)(t.format);t.dynamic?(s.addAttribute(t.attributeName,{buffer:this._dynamicBuffer,stride:4*this._dynamicStride,offset:4*o,format:t.format}),o+=n.size):(s.addAttribute(t.attributeName,{buffer:this._staticBuffer,stride:4*this._staticStride,offset:4*a,format:t.format}),a+=n.size)}s.addIndex(this.indexBuffer);const h=this.getParticleUpdate(i);this._dynamicUpload=h.dynamicUpdate,this._staticUpload=h.staticUpdate,this.geometry=s}getParticleUpdate(e){const t=function(e){const t=[];for(const i in e){const n=e[i];t.push(i,n.code,n.dynamic?"d":"s")}return t.join("_")}(e);return this._generateParticleUpdateCache[t]||(this._generateParticleUpdateCache[t]=this.generateParticleUpdate(e)),this._generateParticleUpdateCache[t]}generateParticleUpdate(e){return function(e){return{dynamicUpdate:f(e,!0),staticUpdate:f(e,!1)}}(e)}update(e,t){e.length>this._size&&(t=!0,this._size=Math.max(e.length,1.5*this._size|0),this.staticAttributeBuffer=new g.u(this._size*this._staticStride*4*4),this.dynamicAttributeBuffer=new g.u(this._size*this._dynamicStride*4*4),this.indexBuffer=m(this._size),this.geometry.indexBuffer.setDataWithSize(this.indexBuffer,this.indexBuffer.byteLength,!0));const i=this.dynamicAttributeBuffer;if(this._dynamicUpload(e,i.float32View,i.uint32View),this._dynamicBuffer.setDataWithSize(this.dynamicAttributeBuffer.float32View,e.length*this._dynamicStride*4,!0),t){const t=this.staticAttributeBuffer;this._staticUpload(e,t.float32View,t.uint32View),this._staticBuffer.setDataWithSize(t.float32View,e.length*this._staticStride*4,!0)}}destroy(){this._staticBuffer.destroy(),this._dynamicBuffer.destroy(),this.geometry.destroy()}}var _=i(2577),b=i(9113),y=i(3012),x=i(8475),T=i(4492),E=i(218),w="\nstruct ParticleUniforms {\n  uProjectionMatrix:mat3x3<f32>,\n  uColor:vec4<f32>,\n  uResolution:vec2<f32>,\n  uRoundPixels:f32,\n};\n\n@group(0) @binding(0) var<uniform> uniforms: ParticleUniforms;\n\n@group(1) @binding(0) var uTexture: texture_2d<f32>;\n@group(1) @binding(1) var uSampler : sampler;\n\nstruct VSOutput {\n    @builtin(position) position: vec4<f32>,\n    @location(0) uv : vec2<f32>,\n    @location(1) color : vec4<f32>,\n  };\n@vertex\nfn mainVertex(\n  @location(0) aVertex: vec2<f32>,\n  @location(1) aPosition: vec2<f32>,\n  @location(2) aUV: vec2<f32>,\n  @location(3) aColor: vec4<f32>,\n  @location(4) aRotation: f32,\n) -> VSOutput {\n  \n   let v = vec2(\n       aVertex.x * cos(aRotation) - aVertex.y * sin(aRotation),\n       aVertex.x * sin(aRotation) + aVertex.y * cos(aRotation)\n   ) + aPosition;\n\n   let position = vec4((uniforms.uProjectionMatrix * vec3(v, 1.0)).xy, 0.0, 1.0);\n\n    let vColor = vec4(aColor.rgb * aColor.a, aColor.a) * uniforms.uColor;\n\n  return VSOutput(\n   position,\n   aUV,\n   vColor,\n  );\n}\n\n@fragment\nfn mainFragment(\n  @location(0) uv: vec2<f32>,\n  @location(1) color: vec4<f32>,\n  @builtin(position) position: vec4<f32>,\n) -> @location(0) vec4<f32> {\n\n    var sample = textureSample(uTexture, uSampler, uv) * color;\n   \n    return sample;\n}";class P extends x.M{constructor(){super({glProgram:b.M.from({vertex:"attribute vec2 aVertex;\nattribute vec2 aUV;\nattribute vec4 aColor;\n\nattribute vec2 aPosition;\nattribute float aRotation;\n\nuniform mat3 uTranslationMatrix;\nuniform float uRound;\nuniform vec2 uResolution;\nuniform vec4 uColor;\n\nvarying vec2 vUV;\nvarying vec4 vColor;\n\nvec2 roundPixels(vec2 position, vec2 targetSize)\n{       \n    return (floor(((position * 0.5 + 0.5) * targetSize) + 0.5) / targetSize) * 2.0 - 1.0;\n}\n\nvoid main(void){\n    float cosRotation = cos(aRotation);\n    float sinRotation = sin(aRotation);\n    float x = aVertex.x * cosRotation - aVertex.y * sinRotation;\n    float y = aVertex.x * sinRotation + aVertex.y * cosRotation;\n\n    vec2 v = vec2(x, y);\n    v = v + aPosition;\n\n    gl_Position = vec4((uTranslationMatrix * vec3(v, 1.0)).xy, 0.0, 1.0);\n\n    if(uRound == 1.0)\n    {\n        gl_Position.xy = roundPixels(gl_Position.xy, uResolution);\n    }\n\n    vUV = aUV;\n    vColor = vec4(aColor.rgb * aColor.a, aColor.a) * uColor;\n}\n",fragment:"varying vec2 vUV;\nvarying vec4 vColor;\n\nuniform sampler2D uTexture;\n\nvoid main(void){\n    vec4 color = texture2D(uTexture, vUV) * vColor;\n    gl_FragColor = color;\n}"}),gpuProgram:y.B.from({fragment:{source:w,entryPoint:"mainFragment"},vertex:{source:w,entryPoint:"mainVertex"}}),resources:{uTexture:T.g.WHITE.source,uSampler:new E.n({}),uniforms:{uTranslationMatrix:{value:new s.u,type:"mat3x3<f32>"},uColor:{value:new _.Q(16777215),type:"vec4<f32>"},uRound:{value:1,type:"f32"},uResolution:{value:[0,0],type:"vec2<f32>"}}}})}}class S{constructor(e,t){this.state=h.U.for2d(),this._gpuBufferHash=Object.create(null),this._destroyRenderableBound=this.destroyRenderable.bind(this),this.localUniforms=new o.k({uTranslationMatrix:{value:new s.u,type:"mat3x3<f32>"},uColor:{value:new Float32Array(4),type:"vec4<f32>"},uRound:{value:1,type:"f32"},uResolution:{value:[0,0],type:"vec2<f32>"}}),this.renderer=e,this.adaptor=t,this.defaultShader=new P,this.state=h.U.for2d()}validateRenderable(e){return!1}addRenderable(e,t){this.renderer.renderPipes.batch.break(t),t.add(e)}getBuffers(e){return this._gpuBufferHash[e.uid]||this._initBuffer(e)}_initBuffer(e){return this._gpuBufferHash[e.uid]=new v({size:e.particleChildren.length,properties:e._properties}),e.on("destroyed",this._destroyRenderableBound),this._gpuBufferHash[e.uid]}updateRenderable(e){}destroyRenderable(e){this._gpuBufferHash[e.uid].destroy(),this._gpuBufferHash[e.uid]=null,e.off("destroyed",this._destroyRenderableBound)}execute(e){const t=e.particleChildren;if(0===t.length)return;const i=this.renderer,n=this.getBuffers(e);e.texture||(e.texture=t[0].texture);const r=this.state;n.update(t,e._childrenDirty),e._childrenDirty=!1,r.blendMode=(0,a.i)(e.blendMode,e.texture._source);const s=this.localUniforms.uniforms,o=s.uTranslationMatrix;e.worldTransform.copyTo(o),o.prepend(i.globalUniforms.globalUniformData.projectionMatrix),s.uResolution=i.globalUniforms.globalUniformData.resolution,s.uRound=i._roundPixels|e._roundPixels,(0,l.V)(e.groupColorAlpha,s.uColor,0),this.adaptor.execute(this,e)}destroy(){this.defaultShader&&(this.defaultShader.destroy(),this.defaultShader=null)}}class M extends S{constructor(e){super(e,new r)}}M.extension={type:[n.Ag.WebGLPipes],name:"particle"};class A{execute(e,t){const i=e.renderer,n=t.shader||e.defaultShader;n.groups[0]=i.renderPipes.uniformBatch.getUniformBindGroup(e.localUniforms,!0),n.groups[1]=i.texture.getTextureBindGroup(t.texture);const r=e.state,s=e.getBuffers(t);i.encoder.draw({geometry:s.geometry,shader:t.shader||e.defaultShader,state:r,size:6*t.particleChildren.length})}}class C extends S{constructor(e){super(e,new A)}}C.extension={type:[n.Ag.WebGPUPipes],name:"particle"},n.XO.add(M),n.XO.add(C)}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,